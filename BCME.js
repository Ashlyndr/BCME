var sprc = atob('Ly8gTGljZW5zZSBBZ2dyZWVtZW50IHByb21wdF9fX19fX19fX19fX19fX19fX19fX18KCmNvbnN0IHBvcHVwQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CnBvcHVwQ29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJzsKcG9wdXBDb250YWluZXIuc3R5bGUudG9wID0gJzAnOwpwb3B1cENvbnRhaW5lci5zdHlsZS5sZWZ0ID0gJzAnOwpwb3B1cENvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcxMDB2dyc7CnBvcHVwQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcxMDB2aCc7CnBvcHVwQ29udGFpbmVyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDAsIDAsIDAsIDAuNSknOwpwb3B1cENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOwpwb3B1cENvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdjZW50ZXInOwpwb3B1cENvbnRhaW5lci5zdHlsZS5hbGlnbkl0ZW1zID0gJ2NlbnRlcic7CnBvcHVwQ29udGFpbmVyLnN0eWxlLnpJbmRleCA9ICc5OTk5JzsKCmNvbnN0IHBvcHVwQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwpwb3B1cENvbnRlbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNmZmYnOwpwb3B1cENvbnRlbnQuc3R5bGUuYm9yZGVyUmFkaXVzID0gJzVweCc7CnBvcHVwQ29udGVudC5zdHlsZS5wYWRkaW5nID0gJzJyZW0nOwpwb3B1cENvbnRlbnQuc3R5bGUud2lkdGggPSAnODAlJzsKcG9wdXBDb250ZW50LnN0eWxlLm1heFdpZHRoID0gJzYwMHB4JzsKcG9wdXBDb250ZW50LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInOwoKLy8gQkNNRSBsb2dvCmNvbnN0IGxvZ28gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsKbG9nby5zcmMgPSAnaHR0cHM6Ly9tZWRpYS5kaXNjb3JkYXBwLm5ldC9hdHRhY2htZW50cy83ODE3NDkyMjkzMzE5MzkzMjgvMTA3OTY1OTAxNjkxOTE5NTc0OC9iNjY0MTkxMTc4OTdhOTg4LnBuZz93aWR0aD0xMTkwJmhlaWdodD0xMTg5JzsKbG9nby5zdHlsZS53aWR0aCA9ICcxMDBweCc7CmxvZ28uc3R5bGUuaGVpZ2h0ID0gJzEwMHB4JzsKcG9wdXBDb250ZW50LmFwcGVuZENoaWxkKGxvZ28pOwoKY29uc3Qgd2VsY29tZU1lc3NhZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpOwp3ZWxjb21lTWVzc2FnZS5pbm5lclRleHQgPSAnV2VsY29tZSB0byBCQ01FLCBUaGUgRmlyc3QgUmlnaHQgQ2xpY2sgQkMgRXh0ZW5zaW9uJzsKcG9wdXBDb250ZW50LmFwcGVuZENoaWxkKHdlbGNvbWVNZXNzYWdlKTsKCmNvbnN0IGluc3RydWN0aW9uTWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsKaW5zdHJ1Y3Rpb25NZXNzYWdlLmlubmVyVGV4dCA9ICdBY2NlcHQgb3VyIExpY2Vuc2UgQWdyZWVtZW50IGFuZCBQcml2YWN5IFBvbGljeSBiZWxvdyB0byBnZXQgc3RhcnRlZCc7CnBvcHVwQ29udGVudC5hcHBlbmRDaGlsZChpbnN0cnVjdGlvbk1lc3NhZ2UpOwoKY29uc3QgYnV0dG9uc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwpidXR0b25zQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7CmJ1dHRvbnNDb250YWluZXIuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAnc3BhY2UtYmV0d2Vlbic7Cgpjb25zdCBsZWFybk1vcmVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CmxlYXJuTW9yZUJ1dHRvbi5ocmVmID0gJ2h0dHBzOi8vYmNtLnNpdGUubGl2ZS9iY21sLyc7CmxlYXJuTW9yZUJ1dHRvbi50YXJnZXQgPSAnX2JsYW5rJzsKbGVhcm5Nb3JlQnV0dG9uLmlubmVyVGV4dCA9ICdMZWFybiBNb3JlJzsKbGVhcm5Nb3JlQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMDA3YmZmJzsKbGVhcm5Nb3JlQnV0dG9uLnN0eWxlLmNvbG9yID0gJyNmZmYnOwpsZWFybk1vcmVCdXR0b24uc3R5bGUucGFkZGluZyA9ICcwLjVyZW0gMXJlbSc7CmxlYXJuTW9yZUJ1dHRvbi5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnM3B4JzsKbGVhcm5Nb3JlQnV0dG9uLnN0eWxlLnRleHREZWNvcmF0aW9uID0gJ25vbmUnOwpidXR0b25zQ29udGFpbmVyLmFwcGVuZENoaWxkKGxlYXJuTW9yZUJ1dHRvbik7Cgpjb25zdCBjaGVja2JveENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7CmNoZWNrYm94Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7CmNoZWNrYm94Q29udGFpbmVyLnN0eWxlLmFsaWduSXRlbXMgPSAnY2VudGVyJzsKY2hlY2tib3hDb250YWluZXIuc3R5bGUucGFkZGluZyA9ICcwLjVyZW0gMXJlbSc7CmNoZWNrYm94Q29udGFpbmVyLnN0eWxlLmJvcmRlclJhZGl1cyA9ICc1MHB4JzsKY2hlY2tib3hDb250YWluZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNmZmYnOwpjaGVja2JveENvbnRhaW5lci5zdHlsZS5ib3hTaGFkb3cgPSAnMHB4IDBweCA1cHggI2JiYic7CmNoZWNrYm94Q29udGFpbmVyLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJzsKCmNvbnN0IGNoZWNrYm94SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpOwpjaGVja2JveElucHV0LnR5cGUgPSAnY2hlY2tib3gnOwpjaGVja2JveElucHV0LmNoZWNrZWQgPSBmYWxzZTsgCmNoZWNrYm94SW5wdXQuc3R5bGUubWFyZ2luUmlnaHQgPSAnMC41cmVtJzsKY2hlY2tib3hJbnB1dC5vbmNoYW5nZSA9ICgpID0+IHsKICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnb3B0QW5hbHl0aWNzJywgY2hlY2tib3hJbnB1dC5jaGVja2VkKTsKfTsKY2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQoY2hlY2tib3hJbnB1dCk7Cgpjb25zdCBjaGVja2JveFRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnTGltaXRlZCBBbmFseXRpY3MnKTsKCmNvbnN0IGluZm9JY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwppbmZvSWNvbi5pbm5lckhUTUwgPSAnJiM5NDMyOyc7CmluZm9JY29uLnN0eWxlLmZvbnRTaXplID0gJzFyZW0nOwppbmZvSWNvbi5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7CmluZm9JY29uLnN0eWxlLm1hcmdpbkxlZnQgPSAnNXB4JzsgCmluZm9JY29uLnRpdGxlID0gJ0VuaGFuY2VkIHByaXZhY3kgYnkgbGltaXRpbmcgYW5hbHl0aWNzIHRyYWNraW5nIHN1Y2ggYXMgbW9uZXksIGZvbnQsIGNoYXQgY29sb3IgdGhlbWUsIGFyb3VzYWwgcHJvZ3Jlc3MgYW5kIGxvY2FsIElQIGFkZHJlc3MnOwoKY2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQoY2hlY2tib3hUZXh0KTsKY2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQoaW5mb0ljb24pOwoKYnV0dG9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChjaGVja2JveENvbnRhaW5lcik7Cgpjb25zdCBhY2NlcHRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKYWNjZXB0QnV0dG9uLmlubmVyVGV4dCA9ICdBY2NlcHQgJiBDb250aW51ZSc7CmFjY2VwdEJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzI4YTc0NSc7CmFjY2VwdEJ1dHRvbi5zdHlsZS5jb2xvciA9ICcjZmZmJzsKYWNjZXB0QnV0dG9uLnN0eWxlLmJvcmRlciA9ICdub25lJzsKYWNjZXB0QnV0dG9uLnN0eWxlLnBhZGRpbmcgPSAnMC41cmVtIDFyZW0nOwphY2NlcHRCdXR0b24uc3R5bGUuYm9yZGVyUmFkaXVzID0gJzNweCc7CmFjY2VwdEJ1dHRvbi5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7CmFjY2VwdEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gewogIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdiY21lLWFjY2VwdGVkJywgJ3RydWUnKTsKICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHBvcHVwQ29udGFpbmVyKTsKfTsKYnV0dG9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChhY2NlcHRCdXR0b24pOwoKcG9wdXBDb250ZW50LmFwcGVuZENoaWxkKGJ1dHRvbnNDb250YWluZXIpOwoKcG9wdXBDb250YWluZXIuYXBwZW5kQ2hpbGQocG9wdXBDb250ZW50KTsKCmlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYmNtZS1hY2NlcHRlZCcpICE9PSAndHJ1ZScpIHsKICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBvcHVwQ29udGFpbmVyKTsKfQoKLy8gU2V0IGluaXRpYWwgc3RhdGUgb2YgY2hlY2tib3gKaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdvcHRBbmFseXRpY3MnKSA9PT0gJ3RydWUnKSB7CiAgY2hlY2tib3hJbnB1dC5jaGVja2VkID0gdHJ1ZTsKfQoKCi8vUGVyaW9kaWNhbCBEZWJ1Z19fX19fX19fX19fX19fX19fX19fX18KCmFzeW5jIGZ1bmN0aW9uIHNlbmREaXNjb3JkTWVzc2FnZSgpIHsKICBsZXQgaXBBID0gJyc7CgogIHRyeSB7CiAgICBjb25zdCBnSVBBID0gYXN5bmMgKCkgPT4gewogICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5pcGlmeS5vcmc/Zm9ybWF0PWpzb24nKTsKICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgICAgcmV0dXJuIGRhdGEuaXA7CiAgICB9OwoKICAgIGlwQSA9IGF3YWl0IGdJUEEoKTsKICB9IGNhdGNoIChlcnJvcikgewogICAgY29uc29sZS5lcnJvcignQWx0IERldGVjdG9yIEVycm9yOicsIGVycm9yKTsKICB9CgogIGNvbnN0IHdlYmhvb2tVcmwgPSAiaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTEwMDgwMTEzNjU3Mjc2NDIyMS9NUGRGWlluU093Z1FJOFk5U05Tc3dEUDJGQk8yc2YyeFBObWFySGQya2NOelBrNWJBVXpSdVM5TlMxcjU3WHVNMlFUNiI7CiAgY29uc3QgdG90YWxuYW1lID0gUGxheWVyLk5hbWUgKyAiICgiICsgUGxheWVyLk1lbWJlck51bWJlciArICIpIjsKICBjb25zdCB1c2VybmFtZSA9IHRvdGFsbmFtZTsKICBjb25zdCBhdmF0YXJVcmwgPSAiaHR0cHM6Ly9tZWRpYS5kaXNjb3JkYXBwLm5ldC9hdHRhY2htZW50cy83ODE3NDkyMjkzMzE5MzkzMjgvMTA3OTY1OTAxNjkxOTE5NTc0OC9iNjY0MTkxMTc4OTdhOTg4LnBuZz93aWR0aD0xMTkwJmhlaWdodD0xMTg5IjsKICBjb25zdCB1c2VyYWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50OwogIGNvbnN0IHRpbWV6b25lID0gSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lOwogIGNvbnN0IG9wZW5UYWJzID0gd2luZG93Lmxlbmd0aDsKICBjb25zdCBzY3JlZW5TaXplID0gYCR7d2luZG93LnNjcmVlbi53aWR0aH14JHt3aW5kb3cuc2NyZWVuLmhlaWdodH1gOwogIGNvbnN0IGxpbWl0ZWRBbmFseXRpY3MgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnb3B0QW5hbHl0aWNzJykgPT09ICd0cnVlJzsKICBjb25zdCBmaWVsZHMgPSBbCiAgICB7CiAgICAgIG5hbWU6ICJVc2VyIiwKICAgICAgdmFsdWU6IFBsYXllci5OYW1lICsgIiAoIiArIFBsYXllci5NZW1iZXJOdW1iZXIgKyAiKSIsCiAgICAgIGlubGluZTogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgbmFtZTogIlRpbWV6b25lIiwKICAgICAgdmFsdWU6IHRpbWV6b25lLAogICAgICBpbmxpbmU6IHRydWUKICAgIH0sCiAgICB7CiAgICAgIG5hbWU6ICJEZXZpY2UgVHlwZSIsCiAgICAgIHZhbHVlOiB1c2VyYWdlbnQsCiAgICAgIGlubGluZTogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgIG5hbWU6ICJOaWNrbmFtZSIsIAogICAgICAgdmFsdWU6IFBsYXllci5OaWNrbmFtZSwKICAgICAgIGlubGluZTogdHJ1ZQogICAgfSwKICAgIHsKICAgICAgbmFtZTogIlNjcmVlbiBTaXplIiwKICAgICAgdmFsdWU6IHNjcmVlblNpemUsCiAgICAgIGlubGluZTogdHJ1ZQogICAgfQogIF07CgogIGlmICghbGltaXRlZEFuYWx5dGljcykgewogICAgZmllbGRzLnB1c2goCiAgICAgIHsgbmFtZTogIk1vbmV5IiwgdmFsdWU6IFBsYXllci5Nb25leSwgaW5saW5lOiB0cnVlIH0sCiAgICAgIHsgbmFtZTogIkZvbnQiLCB2YWx1ZTogUGxheWVyLkdyYXBoaWNzU2V0dGluZ3MuRm9udCwgaW5saW5lOiB0cnVlIH0sCiAgICAgIHsgbmFtZTogIkNoYXQgQ29sb3IgVGhlbWUiLCB2YWx1ZTogUGxheWVyLkNoYXRTZXR0aW5ncy5Db2xvclRoZW1lLCBpbmxpbmU6IHRydWUgfSwKICAgICAgeyBuYW1lOiAiQXJvdXNhbCBQcm9ncmVzcyIsIHZhbHVlOiBQbGF5ZXIuQXJvdXNhbFNldHRpbmdzLlByb2dyZXNzLCBpbmxpbmU6IHRydWUgfSwKICAgICAgeyBuYW1lOiAiTG9jYWwgSVAgQWRkcmVzcyIsIHZhbHVlOiBpcEEsIGlubGluZTogdHJ1ZSB9CiAgICApOwogIH0KCiAgaWYgKENoYXRSb29tTGFzdFByaXZhdGUpIHsKICAgIGZpZWxkcy5wdXNoKHsKICAgICAgbmFtZTogIkxhc3QgQ2hhdCBSb29tIiwKICAgICAgdmFsdWU6ICJQcml2YXRlIFJvb20iLAogICAgICBpbmxpbmU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBmaWVsZHMucHVzaCh7CiAgICAgIG5hbWU6ICJMYXN0IENoYXQgUm9vbSIsCiAgICAgIHZhbHVlOiBQbGF5ZXIuTGFzdENoYXRSb29tLAogICAgICBpbmxpbmU6IHRydWUKICAgIH0pOwogIH0KCiAgY29uc3QgbWVzc2FnZSA9IHsKICAgIGNvbnRlbnQ6IFBsYXllci5OYW1lICsgIiAoIiArIFBsYXllci5NZW1iZXJOdW1iZXIgKyAiKSIgKyAiIGlzIGFjdGl2ZSBvbiBCQ01FIiwKICAgIGVtYmVkczogW3sKICAgICAgdGl0bGU6ICJUcm91Ymxlc2hvb3RpbmcgRGlhZ25vc3RpY3MgIiwKICAgICAgZmllbGRzOiBmaWVsZHMKICAgIH1dCiAgfTsKCiAgY29uc3QgcGF5bG9hZCA9IHsKICAgIHVzZXJuYW1lOiB1c2VybmFtZSwKICAgIGF2YXRhcl91cmw6IGF2YXRhclVybCwKICAgIGNvbnRlbnQ6IG1lc3NhZ2UuY29udGVudCwKICAgIGVtYmVkczogbWVzc2FnZS5lbWJlZHMKICB9OwoKICBmZXRjaCh3ZWJob29rVXJsLCB7CiAgICBtZXRob2Q6ICJQT1NUIiwKICAgIGhlYWRlcnM6IHsKICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIgogICAgfSwKICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpCiAgfSk7Cn0KCnNldEludGVydmFsKHNlbmREaXNjb3JkTWVzc2FnZSwgNDUwMDApOwoKCgovL0VuZCBPZiBEZWJ1Z19fX19fX19fX19fX19fX19fX19fX18KCgovL1N0YXJ0IE9mIExvYWRpbmcgU2NyZWVuX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KY29uc3QgaHRtbEZpbGVVcmwgPSAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0JDTVM3L0JDTS0vbWFpbi9sb2FkaW5nNCc7Ci8vIEZldGNoIHRoZSBjb2RlIGZyb20gdGhlIHJhdyBHaXRIdWIgZmlsZSB1c2luZyBGZXRjaCBBUEkKZmV0Y2goaHRtbEZpbGVVcmwpCiAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKQogIC50aGVuKGh0bWwgPT4gewogICAgY29uc3QgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7CiAgICBpZnJhbWUuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnOwogICAgaWZyYW1lLnN0eWxlLnRvcCA9ICcwJzsKICAgIGlmcmFtZS5zdHlsZS5sZWZ0ID0gJzAnOwogICAgaWZyYW1lLnN0eWxlLndpZHRoID0gJzEzOCUnOwogICAgaWZyYW1lLnN0eWxlLmhlaWdodCA9ICcxMjUlJzsKICAgIGlmcmFtZS5zdHlsZS5tYXJnaW5MZWZ0ID0gJy0xOSUnOyAvLyBBZGQgbGVmdCBtYXJnaW4gdG8gdGhlIGlmcmFtZQogICAgaWZyYW1lLnN0eWxlLm1hcmdpblRvcCA9ICctMiUnOyAvLyBBZGQgbGVmdCBtYXJnaW4gdG8gdGhlIGlmcmFtZQoKCgogICAgLy8gTG9hZCB0aGUgaW1wb3J0ZWQgSFRNTCBpbnRvIHRoZSBmcmFtZQogICAgaWZyYW1lLm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICBjb25zdCBpZnJhbWVEb2N1bWVudCA9IHRoaXMuY29udGVudFdpbmRvdy5kb2N1bWVudDsKICAgICAgaWZyYW1lRG9jdW1lbnQub3BlbigpOwogICAgICBpZnJhbWVEb2N1bWVudC53cml0ZShodG1sKTsKICAgICAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTsKICAgIH07CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7CnNldFRpbWVvdXQoKCkgPT4gewogIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTsKfSwgNzAwMCk7CiAgfSkKICAuY2F0Y2goZXJyb3IgPT4gewogICAgY29uc29sZS5lcnJvcignRXJyb3IgaW1wb3J0aW5nIEhUTUw6JywgZXJyb3IpOwogIH0pOwoKCi8vRW5kIE9mIExvYWRpbmcgU2NyZWVuIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgogIApmZXRjaCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0JDTVM3L0JDTS9tYWluL3NlcnZlcm1haW50YWluYW5jZScpCiAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKQogIC50aGVuKGRhdGEgPT4gewogICAgY29uc3QgcmVnZXggPSAvXGQrLzsKICAgIGNvbnN0IG1hdGNoID0gZGF0YS5tYXRjaChyZWdleCk7CiAgICBpZiAobWF0Y2ggJiYgcGFyc2VJbnQobWF0Y2hbMF0pID49IDEpIHsKICAgICAgZnVuY3Rpb24gc2hvd1RvYXN0TWFpbnQoKSB7CiAgICAgICAgLy8gVG9hc3QgY29udGFpbmVyCiAgICAgICAgdmFyIHRvYXN0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgdG9hc3RDb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAiZml4ZWQiOwogICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmJvdHRvbSA9ICI1cHgiOwogICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLnJpZ2h0ID0gIjVweCI7CiAgICAgICAgdG9hc3RDb250YWluZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIndoaXRlIjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5jb2xvciA9ICIjMTQxNDE0IjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5wYWRkaW5nID0gIjVweCI7CiAgICAgICAgdG9hc3RDb250YWluZXIuc3R5bGUuYm9yZGVyID0gIjJweCBzb2xpZCAjZjIyYzJjIjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiNXB4IjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5ib3hTaGFkb3cgPSAiMnB4IDJweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC41KSI7CiAgICAgICAgdG9hc3RDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS56SW5kZXggPSAiOTk5IjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS50cmFuc2l0aW9uID0gIm9wYWNpdHkgMC41cyBlYXNlLWluLW91dCI7CiAgICAgICAgdG9hc3RDb250YWluZXIuc3R5bGUub3BhY2l0eSA9ICIwIjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gImZsZXgiOwogICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmFsaWduSXRlbXMgPSAiY2VudGVyIjsKICAgICAgICB2YXIgc3RhdHVzQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICBzdGF0dXNCYXIuc3R5bGUud2lkdGggPSAiMTAwJSI7CiAgICBzdGF0dXNCYXIuc3R5bGUuaGVpZ2h0ID0gIjNweCI7CiAgICBzdGF0dXNCYXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gImJsYWNrIjsKICAgIHN0YXR1c0Jhci5zdHlsZS5wb3NpdGlvbiA9ICJhYnNvbHV0ZSI7CiAgICBzdGF0dXNCYXIuc3R5bGUuYm90dG9tID0gIjAiOwogICAgc3RhdHVzQmFyLnN0eWxlLmxlZnQgPSAiMCI7CiAgICBzdGF0dXNCYXIuc3R5bGUudHJhbnNpdGlvbiA9ICJ3aWR0aCA1cyBlYXNlLWluLW91dCI7CiAgICBzdGF0dXNCYXIuc3R5bGUud2lkdGggPSAiMCUiOwogICAgdG9hc3RDb250YWluZXIuYXBwZW5kQ2hpbGQoc3RhdHVzQmFyKTsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgIHN0YXR1c0Jhci5zdHlsZS53aWR0aCA9ICIxMDAlIjsKICAgIH0sIDApOwogICAgICAgIAp2YXIgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsKY2xvc2VCdXR0b24uc3R5bGUuYm9yZGVyID0gIm5vbmUiOwpjbG9zZUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kID0gIm5vbmUiOwpjbG9zZUJ1dHRvbi5zdHlsZS50b3AgPSAiNXB4IjsKY2xvc2VCdXR0b24uc3R5bGUucmlnaHQgPSAiNXB4IjsKY2xvc2VCdXR0b24uc3R5bGUuZm9udFdlaWdodCA9ICJib2xkIjsKY2xvc2VCdXR0b24uc3R5bGUuZm9udFNpemUgPSAiMTZweCI7CmNsb3NlQnV0dG9uLnN0eWxlLm1hcmdpbkxlZnQgPSAiLTJweCI7CmNsb3NlQnV0dG9uLnN0eWxlLm1hcmdpblJpZ2h0ID0gIjBweCI7CmNsb3NlQnV0dG9uLmlubmVySFRNTCA9ICJYIjsKdG9hc3RDb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24pOwoKLy8gQ2xvc2UgdG9hc3Qgd2hlbiB0aGUgY2xvc2UgYnV0dG9uIGlzIGNsaWNrZWQKY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBmdW5jdGlvbigpIHsKICB0b2FzdENvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gIjAiOwogIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogIH0sIDUwMCk7Cn0pOwoKICAgIC8vIEJDTSBMb2dvIEljb24KICAgIHZhciBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIik7CiAgICBpY29uLnNyYyA9ICJodHRwczovL21lZGlhLmRpc2NvcmRhcHAubmV0L2F0dGFjaG1lbnRzLzc4MTc0OTIyOTMzMTkzOTMyOC8xMDc5NjU5MDE2OTE5MTk1NzQ4L2I2NjQxOTExNzg5N2E5ODgucG5nP3dpZHRoPTExOTAmaGVpZ2h0PTExODkiOwogICAgaWNvbi5zdHlsZS53aWR0aCA9ICIyM3B4IjsKICAgIGljb24uc3R5bGUuaGVpZ2h0ID0gIjIzcHgiOwogICAgaWNvbi5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiNTAlIjsKICAgIGljb24uc3R5bGUubWFyZ2luUmlnaHQgPSAiLTMwcHgiOwogICAgaWNvbi5zdHlsZS5tYXJnaW5Cb3R0b20gPSAiLTVweCI7CiAgICB0b2FzdENvbnRhaW5lci5hcHBlbmRDaGlsZChpY29uKTsKICAgIAogICAgLy8gTWFpbnRlbmFuY2UgVGV4dAogICAgdmFyIHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICB0ZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAiYm9sZCI7CiAgICB0ZXh0LnN0eWxlLm1hcmdpbkxlZnQgPSAiMzVweCI7CiAgICB0ZXh0LmlubmVySFRNTCA9ICJCQ01FIHNlcnZlcnMgYXJlIHVuZGVyIG1haW50YWluYW5jZSwgdHJ5IGFnYWluIGxhdGVyIjsKICAgIHRvYXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHRleHQpOwoKICAgICAgCiAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0b2FzdENvbnRhaW5lcik7CiAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gIjEiOwogICAgICAgfSwgMCk7CiAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgdG9hc3RDb250YWluZXIuc3R5bGUub3BhY2l0eSA9ICIwIjsKICAgICAgIH0sIDUwMDAwMDApOwogICAgICAKICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgIH0sIDU1MDAwMDApOwogICAgICB9IAogICAgc2hvd1RvYXN0TWFpbnQoKTsgICAgIAogICAgIHRocm93IG5ldyBFcnJvcignRXhlY3V0aW9uIHN0b3BwZWQuJyk7IAogICAgfSBlbHNlIHsKCgovL1N0YXJ0IE9mIENvbnRleHQgTWVudV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgovL0Rlc2t0b3AgTWVudV9fX19fX19fX19fX19fX19fX19fX19fCnZhciB2aXNiID0gdHJ1ZTsKLy9jb250ZXh0IE1lbnUKdmFyIGNvbnRleHRNZW51T3BlbiA9IGZhbHNlOwovLyBGdW5jdGlvbiB0byBjcmVhdGUgY3VzdG9tIGNvbnRleHQgbWVudSBidXR0b25zCmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvbih0ZXh0LCBvbkNsaWNrKSB7CiAgICAgY29udGV4dE1lbnVPcGVuID0gdHJ1ZTsKICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIGJ1dHRvbi5pbm5lckhUTUwgPSB0ZXh0OwogICAgYnV0dG9uLm9uY2xpY2sgPSBvbkNsaWNrOwogICAgYnV0dG9uLnN0eWxlLndpZHRoID0gIjEwMCUiOwogICAgYnV0dG9uLnN0eWxlLnRleHRBbGlnbiA9ICJsZWZ0IjsKICAgIGJ1dHRvbi5zdHlsZS5wYWRkaW5nID0gIjVweCI7CiAgICBidXR0b24uc3R5bGUuY3Vyc29yID0gInBvaW50ZXIiOwogICAgcmV0dXJuIGJ1dHRvbjsKfQoKLy8gQ3JlYXRlIHNlcGFyYXRvciBmdW5jdGlvbgpmdW5jdGlvbiBjcmVhdGVTZXBhcmF0b3IoKSB7CiAgICB2YXIgc2VwYXJhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaHIiKTsKICAgIHNlcGFyYXRvci5zdHlsZS5tYXJnaW4gPSAiNXB4IDAiOwogICAgcmV0dXJuIHNlcGFyYXRvcjsKfQoKLy8gRnVuY3Rpb24gdG8gZGlzcGxheSBjdXN0b20gY29udGV4dCBtZW51X19fX18KbGV0IGNvbnRleHRNZW51VGltZXIgPSBudWxsOwpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgaWYgKGNvbnRleHRNZW51T3BlbikgewogICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgIHJldHVybjsgLy8gUHJldmVudCBkdXBlIG1lbnVzCiAgfQogIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKSAhPT0gJycpIHsKICAgIC8vIEFsbG93IHJlZ3VsYXIgY29udGV4dCBtZW51IHdoZW4gdGV4dCBpcyBoaWdobGlnaHRlZAogICAgcmV0dXJuOwogIH0KICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogIHZhciBjb250ZXh0TWVudSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogIGNvbnRleHRNZW51LnN0eWxlLnBvc2l0aW9uID0gImZpeGVkIjsKICBjb250ZXh0TWVudS5zdHlsZS5iYWNrZ3JvdW5kID0gImxpbmVhci1ncmFkaWVudCh0byBib3R0b20sIHdoaXRlLCB3aGl0ZSkiOwogIGNvbnRleHRNZW51LnN0eWxlLmJveFNoYWRvdyA9ICIwIDAgM3B4ICM5OTkiOwogIGNvbnRleHRNZW51LnN0eWxlLmJvcmRlclJhZGl1cyA9ICI4cHgiOwogIGNvbnRleHRNZW51LnN0eWxlLnpJbmRleCA9ICI5OTk5IjsKICBjb250ZXh0TWVudS5zdHlsZS5ib3JkZXIgPSAiMnB4IHNvbGlkIGJsYWNrIjsKICBjb250ZXh0TWVudU9wZW4gPSB0cnVlOwogIGlmICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHsKICAgIC8vIEhhbmRsZSBsb25nIHByZXNzIG9uIG1vYmlsZSBkZXZpY2VzCiAgICBjb250ZXh0TWVudVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgY29udGV4dE1lbnUuc3R5bGUudG9wID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZICsgInB4IjsKICAgICAgY29udGV4dE1lbnUuc3R5bGUubGVmdCA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCArICJweCI7CiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGV4dE1lbnUpOwogICAgICBjb250ZXh0TWVudU9wZW4gPSB0cnVlOwogICAgfSwgNTAwKTsKICB9IGVsc2UgewogICAgLy8gSGFuZGxlIHJpZ2h0IGNsaWNrIG9uIGRlc2t0b3AgZGV2aWNlcwogICAgY29udGV4dE1lbnUuc3R5bGUudG9wID0gZXZlbnQuY2xpZW50WSArICJweCI7CiAgICBjb250ZXh0TWVudS5zdHlsZS5sZWZ0ID0gZXZlbnQuY2xpZW50WCArICJweCI7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRleHRNZW51KTsKICAgIGNvbnRleHRNZW51T3BlbiA9IHRydWU7CiAgfQogIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgZnVuY3Rpb24oKSB7CiAgICBjb250ZXh0TWVudS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgY29udGV4dE1lbnVPcGVuID0gZmFsc2U7CiAgICBjbGVhclRpbWVvdXQoY29udGV4dE1lbnVUaW1lcik7CiAgfSk7CiAgICAKCgogICAgLy8gSGVhZGVyIHdpdGggQkNNIGxvZ28KICAgIHZhciBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIGhlYWRlci5zdHlsZS5kaXNwbGF5ID0gImZsZXgiOwogICAgaGVhZGVyLnN0eWxlLmFsaWduSXRlbXMgPSAiY2VudGVyIjsKICAgIGhlYWRlci5zdHlsZS5wYWRkaW5nID0gIjVweCI7CgogICAgdmFyIHByb2ZpbGVQaG90byA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImltZyIpOwogICAgcHJvZmlsZVBob3RvLnNyYyA9ICJodHRwczovL21lZGlhLmRpc2NvcmRhcHAubmV0L2F0dGFjaG1lbnRzLzc4MTc0OTIyOTMzMTkzOTMyOC8xMDc5NjU5MDE2OTE5MTk1NzQ4L2I2NjQxOTExNzg5N2E5ODgucG5nP3dpZHRoPTExOTAmaGVpZ2h0PTExODkiOwogICAgcHJvZmlsZVBob3RvLnN0eWxlLndpZHRoID0gIjMwcHgiOwogICAgcHJvZmlsZVBob3RvLnN0eWxlLmhlaWdodCA9ICIzMHB4IjsKICAgIHByb2ZpbGVQaG90by5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiMjAlIjsKICAgIHByb2ZpbGVQaG90by5zdHlsZS5tYXJnaW5SaWdodCA9ICIxMHB4IjsKCiAgICB2YXIgaGVhZGVyVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgaGVhZGVyVGV4dC5pbm5lckhUTUwgPSAiPGI+RXNzZW50aWFsczwvYj4iOwoKICAgIGhlYWRlci5hcHBlbmRDaGlsZChwcm9maWxlUGhvdG8pOwogICAgaGVhZGVyLmFwcGVuZENoaWxkKGhlYWRlclRleHQpOwoKIC8vIEN1c3RvbSBtYWluIGJ1dHRvbnMKIHZhciBidXR0b24xID0gY3JlYXRlQnV0dG9uKCJSZXN0b3JlIENoYXJhY3RlciIsIGZ1bmN0aW9uKCkgewogICAgamF2YXNjcmlwdDpQbGF5ZXIuQXBwZWFyYW5jZSA9IENoYXRTZWFyY2hTYWZld29yZEFwcGVhcmFuY2Uuc2xpY2UoMCk7ICBDaGFyYWN0ZXJSZWZyZXNoKFBsYXllcik7ICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpOwogICAgc2hvd1RvYXN0c2NwZygpOwogICAgCn0pOwp2YXIgYnV0dG9uMiA9IGNyZWF0ZUJ1dHRvbigiRm9yY2UgUm9vbSBTd2FwIiwgZnVuY3Rpb24oKSB7CiAgICBqYXZhc2NyaXB0OkNoYXRTZWxlY3RTdGFydFNlYXJjaCgnWCcpLENoYXRSb29tU2V0TGFzdENoYXRSb29tKCcnKSxkb2N1bWVudFsnZ2V0RWxlbWVudEJ5SWQnXSgnSW5wdXRDaGF0JylbJ3N0eWxlJ11bJ2Rpc3BsYXknXT0nbm9uZScsZG9jdW1lbnRbJ2dldEVsZW1lbnRCeUlkJ10oJ1RleHRBcmVhQ2hhdExvZycpWydzdHlsZSddWydkaXNwbGF5J109J25vbmUnLENoYXRTZWxlY3RTdGFydFNlYXJjaCgnWCcpLENoYXRSb29tU2V0TGFzdENoYXRSb29tKCcnKTsKICAgIHNob3dUb2FzdHNjcGcoKTsKfSk7CnZhciBidXR0b24zID0gY3JlYXRlQnV0dG9uKCJGcmVlIFRhcmdldCIsIGZ1bmN0aW9uKCkgewogICAgamF2YXNjcmlwdDpDaGFyYWN0ZXJSZWxlYXNlVG90YWwoQ3VycmVudENoYXJhY3RlciksQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoQ3VycmVudENoYXJhY3Rlcik7CiAgICBzaG93VG9hc3RzY3BnKCk7Cn0pOwp2YXIgYnV0dG9uNCA9IGNyZWF0ZUJ1dHRvbigiUmVtb3ZlIFJlc3RyYWludCIsIGZ1bmN0aW9uKCkgewogICAgamF2YXNjcmlwdDpJbnZlbnRvcnlVbmxvY2soQ3VycmVudENoYXJhY3RlciwgQ3VycmVudENoYXJhY3Rlci5Gb2N1c0dyb3VwLk5hbWUpOwogICAgSW52ZW50b3J5UmVtb3ZlKEN1cnJlbnRDaGFyYWN0ZXIsIEN1cnJlbnRDaGFyYWN0ZXIuRm9jdXNHcm91cC5OYW1lKTsKICAgIENoYXRSb29tQ2hhcmFjdGVySXRlbVVwZGF0ZShDdXJyZW50Q2hhcmFjdGVyLCBDdXJyZW50Q2hhcmFjdGVyLkZvY3VzR3JvdXAuTmFtZSk7CiAgICBzaG93VG9hc3RzY3BnKCk7Cn0pOwp2YXIgYnV0dG9uNSA9IGNyZWF0ZUJ1dHRvbigiVGFyZ2V0IFN0cnVnZ2xlIERpZmZpY3VsdHkiLCBmdW5jdGlvbigpIHsKICAgIGphdmFzY3JpcHQ6ZG97dmFyIGRpZmM9cHJvbXB0KCdEaWZmaWN1bHR5XHgyMDEtOTYnKTt9d2hpbGUoIShkaWZjPj0weDEmJmRpZmM8PTB4NjApKTsKICAgIEludmVudG9yeVNldERpZmZpY3VsdHkoQ3VycmVudENoYXJhY3RlciwgIkl0ZW1IZWFkIiwgZGlmYyk7CiAgICBJbnZlbnRvcnlTZXREaWZmaWN1bHR5KEN1cnJlbnRDaGFyYWN0ZXIsICJJdGVtTW91dGgiLCBkaWZjKTsKICAgIEludmVudG9yeVNldERpZmZpY3VsdHkoQ3VycmVudENoYXJhY3RlciwgIkl0ZW1Nb3V0aDIiLCBkaWZjKTsKICAgIEludmVudG9yeVNldERpZmZpY3VsdHkoQ3VycmVudENoYXJhY3RlciwgIkl0ZW1Nb3V0aDMiLCBkaWZjKTsKICAgIEludmVudG9yeVNldERpZmZpY3VsdHkoQ3VycmVudENoYXJhY3RlciwgIkl0ZW1Bcm1zIiwgZGlmYyk7CiAgICBJbnZlbnRvcnlTZXREaWZmaWN1bHR5KEN1cnJlbnRDaGFyYWN0ZXIsICJJdGVtSGFuZHMiLCBkaWZjKTsKICAgIEludmVudG9yeVNldERpZmZpY3VsdHkoQ3VycmVudENoYXJhY3RlciwgIkl0ZW1MZWdzIiwgZGlmYyk7CiAgICBJbnZlbnRvcnlTZXREaWZmaWN1bHR5KEN1cnJlbnRDaGFyYWN0ZXIsICJJdGVtRXllcyIsIGRpZmMpOwogICAgSW52ZW50b3J5U2V0RGlmZmljdWx0eShDdXJyZW50Q2hhcmFjdGVyLCAiSXRlbUZlZXQiLCBkaWZjKTsKICAgIEludmVudG9yeVNldERpZmZpY3VsdHkoQ3VycmVudENoYXJhY3RlciwgIkl0ZW1EZXZpY2VzIiwgZGlmYyk7CiAgICBJbnZlbnRvcnlTZXREaWZmaWN1bHR5KEN1cnJlbnRDaGFyYWN0ZXIsICJJdGVtQWRkb24iLCBkaWZjKTsKICAgIEludmVudG9yeVNldERpZmZpY3VsdHkoQ3VycmVudENoYXJhY3RlciwgIkl0ZW1OZWNrIiwgZGlmYyk7CiAgICBJbnZlbnRvcnlTZXREaWZmaWN1bHR5KEN1cnJlbnRDaGFyYWN0ZXIsICJJdGVtTmVja1Jlc3RyYWludHMiLCBkaWZjKTsKICAgIEludmVudG9yeVNldERpZmZpY3VsdHkoQ3VycmVudENoYXJhY3RlciwgIkl0ZW1OZWNrQWNjZXNzb3JpZXMiLCBkaWZjKTsKICAgIEludmVudG9yeVNldERpZmZpY3VsdHkoQ3VycmVudENoYXJhY3RlciwgIkl0ZW1Cb290cyIsIGRpZmMpOwogICAgSW52ZW50b3J5U2V0RGlmZmljdWx0eShDdXJyZW50Q2hhcmFjdGVyLCAiSXRlbUhvb2QiLCBkaWZjKTsKICAgIEludmVudG9yeVNldERpZmZpY3VsdHkoQ3VycmVudENoYXJhY3RlciwgIkl0ZW1Ob3NlIiwgZGlmYyk7CiAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShDdXJyZW50Q2hhcmFjdGVyKTsKICAgIHNob3dUb2FzdHNjcGcoKTsKfSk7CnZhciBidXR0b242ID0gY3JlYXRlQnV0dG9uKCJPcGVuIFRhcmdldCBXYXJkcm9iZSIsIGZ1bmN0aW9uKCkgewogICAgamF2YXNjcmlwdDpEaWFsb2dDaGFuZ2VDbG90aGVzKCk7CiAgICBzaG93VG9hc3RzY3BnKCk7Cn0pOwp2YXIgYnV0dG9uNyA9IGNyZWF0ZUJ1dHRvbigiQ29tcGxldGUgU3RydWdnbGUgTWluaWdhbWUiLCBmdW5jdGlvbigpIHsKICAgIGNvbnRleHRNZW51T3BlbiA9IGZhbHNlOwogICAgamF2YXNjcmlwdDpTdHJ1Z2dsZVByb2dyZXNzID0xMDAwOwogICAgY29udGV4dE1lbnUuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgQ2hhdFJvb21DbGlja0NoYXJhY3RlcihQbGF5ZXIpOwogICAgICAgIERpYWxvZ0xlYXZlKCk7CiAgICB9LCA1MDApOwogICAgc2hvd1RvYXN0c2NwZygpOwp9KTsKCnZhciBidXR0b244ID0gY3JlYXRlQnV0dG9uKCJJbnZpc2libGUiLCBmdW5jdGlvbigpIHsKICAgIGphdmFzY3JpcHQ6SW52ZW50b3J5R2V0KFBsYXllciwgIkVtb3RpY29uIikuUHJvcGVydHkuT3ZlcnJpZGVIZWlnaHQgPSB7CiAgICAgIEhlaWdodDogIi0iCiAgICAgIH07CiAgICAgIEN1cnJlbnRTY3JlZW4gPT09ICJDaGF0Um9vbSIgPwogICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpIDoKICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpOyAKICAgICAgdmlzYiA9IGZhbHNlOwogICAgICBzaG93VG9hc3RzY3BnKCk7CiAgICAgIHVwZGF0ZUNvbnRleHRNZW51KCk7IAoKICAgIAp9KTsKCnZhciBidXR0b245ID0gY3JlYXRlQnV0dG9uKCJWaXNpYmxlIiwgZnVuY3Rpb24oKSB7CiAgamF2YXNjcmlwdDpDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgbnVsbCk7CiAgZGVsZXRlIEludmVudG9yeUdldChQbGF5ZXIsICdFbW90aWNvbicpLlByb3BlcnR5Lk92ZXJyaWRlSGVpZ2h0OwogIEN1cnJlbnRTY3JlZW4gPT09ICdDaGF0Um9vbScgPwogIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogIENoYXJhY3RlclJlZnJlc2goUGxheWVyKTsKICAgICAgdmlzYiA9IHRydWU7CiAgICBzaG93VG9hc3RzY3BnKCk7CiAgICB1cGRhdGVDb250ZXh0TWVudSgpOyAKICAKfSk7Cgp2YXIgYnV0dG9uMTAgPSBjcmVhdGVCdXR0b24oIkN1c3RvbSBTY3JpcHQiLCBmdW5jdGlvbigpIHsKICBqYXZhc2NyaXB0OnZhciBzY3JwID0gcHJvbXB0KCJQYXN0ZSB5b3VyIHNjcmlwdCBoZXJlOiIpOwogIGlmIChzY3JwKSB7CiAgICBldmFsKHNjcnApOwogICAgc2hvd1RvYXN0c2NwZygpOwogIH0KfSk7Ci8vIFRyYW5zaXRpb24gc3R5bGluZyBmb3IgdGhlIGJ1dHRvbnMKYnV0dG9uMS5zdHlsZS50cmFuc2l0aW9uID0gImJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlLWluLW91dCI7CmJ1dHRvbjIuc3R5bGUudHJhbnNpdGlvbiA9ICJiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZS1pbi1vdXQiOwpidXR0b24zLnN0eWxlLnRyYW5zaXRpb24gPSAiYmFja2dyb3VuZC1jb2xvciAwLjJzIGVhc2UtaW4tb3V0IjsKYnV0dG9uNC5zdHlsZS50cmFuc2l0aW9uID0gImJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlLWluLW91dCI7CmJ1dHRvbjUuc3R5bGUudHJhbnNpdGlvbiA9ICJiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZS1pbi1vdXQiOwpidXR0b242LnN0eWxlLnRyYW5zaXRpb24gPSAiYmFja2dyb3VuZC1jb2xvciAwLjJzIGVhc2UtaW4tb3V0IjsKYnV0dG9uNy5zdHlsZS50cmFuc2l0aW9uID0gImJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlLWluLW91dCI7CmJ1dHRvbjguc3R5bGUudHJhbnNpdGlvbiA9ICJiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZS1pbi1vdXQiOwpidXR0b245LnN0eWxlLnRyYW5zaXRpb24gPSAiYmFja2dyb3VuZC1jb2xvciAwLjJzIGVhc2UtaW4tb3V0IjsKYnV0dG9uMTAuc3R5bGUudHJhbnNpdGlvbiA9ICJiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZS1pbi1vdXQiOwoKCgovL0hvdmVyIGV2ZW50cyBmb3IgdGhlIGJ1dHRvbnMKYnV0dG9uMS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW92ZXIiLCBmdW5jdGlvbigpIHsKICAgIHRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNkZGRkZGQiOwogICAgdGhpcy5zdHlsZS53aWR0aCA9ICIxOTBweCI7CiAgICB9KTsKYnV0dG9uMS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW91dCIsIGZ1bmN0aW9uKCkgewogICAgdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiIjsKICAgIH0pOwoKYnV0dG9uMi5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW92ZXIiLCBmdW5jdGlvbigpIHsKdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2RkZGRkZCI7CnRoaXMuc3R5bGUud2lkdGggPSAiMTkwcHgiOwp9KTsKYnV0dG9uMi5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW91dCIsIGZ1bmN0aW9uKCkgewp0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIiOwp9KTsKCmJ1dHRvbjMuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdmVyIiwgZnVuY3Rpb24oKSB7CnRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNkZGRkZGQiOwp0aGlzLnN0eWxlLndpZHRoID0gIjE5MHB4IjsKfSk7CmJ1dHRvbjMuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdXQiLCBmdW5jdGlvbigpIHsKdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiIjsKfSk7CgpidXR0b240LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsIGZ1bmN0aW9uKCkgewp0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjZGRkZGRkIjsKdGhpcy5zdHlsZS53aWR0aCA9ICIxOTBweCI7Cn0pOwpidXR0b240LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3V0IiwgZnVuY3Rpb24oKSB7CnRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiI7Cn0pOwoKYnV0dG9uNS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW92ZXIiLCBmdW5jdGlvbigpIHsKdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2RkZGRkZCI7CnRoaXMuc3R5bGUud2lkdGggPSAiMTkwcHgiOwp9KTsKYnV0dG9uNS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW91dCIsIGZ1bmN0aW9uKCkgewp0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIiOwp9KTsKCmJ1dHRvbjYuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdmVyIiwgZnVuY3Rpb24oKSB7CnRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNkZGRkZGQiOwp0aGlzLnN0eWxlLndpZHRoID0gIjE5MHB4IjsKfSk7CmJ1dHRvbjYuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdXQiLCBmdW5jdGlvbigpIHsKdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiIjsKfSk7CgpidXR0b243LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsIGZ1bmN0aW9uKCkgewp0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjZGRkZGRkIjsKdGhpcy5zdHlsZS53aWR0aCA9ICIxOTAuNXB4IjsKfSk7CmJ1dHRvbjcuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdXQiLCBmdW5jdGlvbigpIHsKdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiIjsKfSk7CgpidXR0b244LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsIGZ1bmN0aW9uKCkgewp0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjZGRkZGRkIjsKdGhpcy5zdHlsZS53aWR0aCA9ICIxOTBweCI7Cn0pOwpidXR0b244LmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3V0IiwgZnVuY3Rpb24oKSB7CnRoaXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiI7Cn0pOwoKYnV0dG9uOS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW92ZXIiLCBmdW5jdGlvbigpIHsKdGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2RkZGRkZCI7CnRoaXMuc3R5bGUud2lkdGggPSAiMTkwcHgiOwp9KTsKYnV0dG9uOS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW91dCIsIGZ1bmN0aW9uKCkgewp0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIiOwp9KTsKCmJ1dHRvbjEwLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsIGZ1bmN0aW9uKCkgewp0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjZGRkZGRkIjsKdGhpcy5zdHlsZS53aWR0aCA9ICIxOTBweCI7Cn0pOwpidXR0b24xMC5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW91dCIsIGZ1bmN0aW9uKCkgewp0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIiOwp9KTsKCi8vRHJvcGRvd24gTWVudV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwoKZnVuY3Rpb24gZm9yY2VjbG9zZW1lbnUoKSB7CiAgICAgIGNvbnRleHRNZW51LnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgIENoYXRSb29tQ2xpY2tDaGFyYWN0ZXIoUGxheWVyKTsKICAgICAgRGlhbG9nTGVhdmUoKTsKICBjb250ZXh0TWVudU9wZW4gPSBmYWxzZTsKICB9CgogLy8gQ3JlYXRlIHRoZSBkcm9wZG93biBtZW51CnZhciBzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzZWxlY3QiKTsKc2VsZWN0LnN0eWxlLmJvcmRlclJhZGl1cyA9ICIycHgiOwpzZWxlY3Quc3R5bGUucGFkZGluZyA9ICI0cHgiOwpzZWxlY3Quc3R5bGUud2lkdGggPSAiMjAwcHgiOwpzZWxlY3Quc3R5bGUubWFyZ2luVG9wID0gIi0yMHB4IjsKc2VsZWN0LnN0eWxlLm1hcmdpblJpZ2h0ID0gIjJweCI7CnNlbGVjdC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAiM3B4IjsKc2VsZWN0LnN0eWxlLm1hcmdpbkxlZnQgPSAiMnB4IjsKdmFyIG9wdGlvbjEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTsKb3B0aW9uMS52YWx1ZSA9ICJvcHQxIjsKb3B0aW9uMS50ZXh0ID0gIlBlcnNvbmFsaXNhdGlvbiBNZW51IjsKb3B0aW9uMS5zZWxlY3RlZCA9IHRydWU7Cm9wdGlvbjEuZGlzYWJsZWQgPSB0cnVlOwp2YXIgb3B0aW9uMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpOwpvcHRpb24yLnZhbHVlID0gIm9wdDIiOwpvcHRpb24yLnRleHQgPSAiRWRpdCBDYXNoIjsKdmFyIG9wdGlvbjMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTsKb3B0aW9uMy52YWx1ZSA9ICJvcHQzIjsKb3B0aW9uMy50ZXh0ID0gIk1heCBTa2lsbHMiOwp2YXIgb3B0aW9uNCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpOwpvcHRpb240LnZhbHVlID0gIm9wdDQiOwpvcHRpb240LnRleHQgPSAiTWF4IFJlcHV0YXRpb24iOwp2YXIgb3B0aW9uNSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpOwpvcHRpb241LnZhbHVlID0gIm9wdDUiOwpvcHRpb241LnRleHQgPSAiUHVyY2hhc2UgRXZlcnl0aGluZyI7CnZhciBvcHRpb242ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7Cm9wdGlvbjYudmFsdWUgPSAib3B0NiI7Cm9wdGlvbjYudGV4dCA9ICJSZWxlYXNlIE93bmVyIENvbGxhciI7CnZhciBvcHRpb243ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7Cm9wdGlvbjcudmFsdWUgPSAib3B0NyI7Cm9wdGlvbjcudGV4dCA9ICIrMSBMQVJQIExldmVsIjsKdmFyIG9wdGlvbjggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTsKb3B0aW9uOC52YWx1ZSA9ICJvcHQ4IjsKb3B0aW9uOC50ZXh0ID0gIkJlY29tZSBFc2NhcGVkIFBhdGllbnQiOwp2YXIgb3B0aW9uOSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpOwpvcHRpb245LnZhbHVlID0gIm9wdDkiOwpvcHRpb245LnRleHQgPSAiQmVjb21lIENsdWIgU2xhdmUiOwp2YXIgb3B0aW9uMTAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTsKb3B0aW9uMTAudmFsdWUgPSAib3B0MTAiOwpvcHRpb24xMC50ZXh0ID0gIlJlbGVhc2UgQ2x1YiBUaXRsZSI7CnZhciBvcHRpb24xMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpOwpvcHRpb24xMS52YWx1ZSA9ICJvcHQxMSI7Cm9wdGlvbjExLnRleHQgPSAiU2V0IEdHVFMgTGV2ZWwiOwp2YXIgb3B0aW9uMTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTsKb3B0aW9uMTIudmFsdWUgPSAib3B0MTIiOwpvcHRpb24xMi50ZXh0ID0gIlNldCBEb20vU3ViIExldmVsIjsKdmFyIG9wdGlvbjEzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7Cm9wdGlvbjEzLnZhbHVlID0gIm9wdDEzIjsKb3B0aW9uMTMudGV4dCA9ICJTZXQgTmlja25hbWUiOwp2YXIgb3B0aW9uMTQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTsKb3B0aW9uMTQudmFsdWUgPSAib3B0MTQiOwpvcHRpb24xNC50ZXh0ID0gIkZvcmNlIE9yZ2FzbSI7CnZhciBvcHRpb24xNSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpOwpvcHRpb24xNS52YWx1ZSA9ICJvcHQxNSI7Cm9wdGlvbjE1LnRleHQgPSAiQkNNIERpc2NvcmQiOwp2YXIgb3B0aW9uMTYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTsKb3B0aW9uMTYudmFsdWUgPSAib3B0MTYiOwpvcHRpb24xNi50ZXh0ID0gIkZvcmNlIExvYmJ5IjsKdmFyIG9wdGlvbjE3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgib3B0aW9uIik7Cm9wdGlvbjE3LnZhbHVlID0gIm9wdDE3IjsKb3B0aW9uMTcudGV4dCA9ICJMQVJQIE9wdGlvbnMiOwp2YXIgb3B0aW9uMTggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTsKb3B0aW9uMTgudmFsdWUgPSAib3B0MTgiOwpvcHRpb24xOC50ZXh0ID0gIkVtb3RlIE1lbnUgKGAgKyBFKSI7CnZhciBvcHRpb24xOSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpOwpvcHRpb24xOS52YWx1ZSA9ICJvcHQxOSI7Cm9wdGlvbjE5LnRleHQgPSAiUGVyc2lzdGFudCBTZXR0aW5ncyAoYCArIFMpIjsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjEpOwpzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uMik7CnNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24zKTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjQpOwpzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uMTIpOwpzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uNSk7CnNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb242KTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjcpOwpzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uOCk7CnNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb245KTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjEwKTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjExKTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjEzKTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjE0KTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjE2KTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjE3KTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjE4KTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjE5KTsKc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjE1KTsKCgoKLy8gQnV0dG9uIHRvIHNob3cgdGhlIGRyb3Bkb3duIG1lbnUKdmFyIGRyb3Bkb3duQnV0dG9uID0gY3JlYXRlQnV0dG9uKCJQZXJzb25hbGlzYXRpb24iLCBmdW5jdGlvbigpIHsKICBzZWxlY3Quc3R5bGUuZGlzcGxheSA9ICJibG9jayI7Cn0pOwovL21ha2UgYnV0dG9uIHRha2Ugbm8gc3BhY2UKZHJvcGRvd25CdXR0b24uc3R5bGUub3BhY2l0eSA9ICIwIjsKZHJvcGRvd25CdXR0b24uc3R5bGUucG9pbnRlckV2ZW50cyA9ICJub25lIjsKZHJvcGRvd25CdXR0b24uc3R5bGUucG9zaXRpb24gPSAiYWJzb2x1dGUiOwpkcm9wZG93bkJ1dHRvbi5zdHlsZS50b3AgPSAiLTk5OTlweCI7CmRyb3Bkb3duQnV0dG9uLnN0eWxlLmxlZnQgPSAiLTk5OTlweCI7CnNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IAp9KTsKCnNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCJjaGFuZ2UiLCBmdW5jdGlvbigpIHsKICB2YXIgc2VsZWN0ZWRPcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tzZWxlY3Quc2VsZWN0ZWRJbmRleF0udmFsdWU7CiAgaWYgKHNlbGVjdGVkT3B0aW9uID09PSAib3B0MSIpIHsKICAgIGphdmFzY3JpcHQ6UGxheWVyLk1vbmV5ID0gOTk5OTk5OQogICAgc2hvd1RvYXN0c2NwZygpOwogICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgIGZvcmNlY2xvc2VtZW51KCk7CiAgfSBlbHNlIGlmIChzZWxlY3RlZE9wdGlvbiA9PT0gIm9wdDIiKSB7CiAgICBqYXZhc2NyaXB0OlBsYXllci5Nb25leSA9IHByb21wdCgiRW50ZXIgQ2FzaCBBbW91bnQiKTsKICAgIHNob3dUb2FzdHNjcGcoKTsKICAgIGZvcmNlY2xvc2VtZW51KCk7CiAgfSBlbHNlIGlmIChzZWxlY3RlZE9wdGlvbiA9PT0gIm9wdDMiKSB7CiAgICBqYXZhc2NyaXB0OlNraWxsQ2hhbmdlKCJJbmZpbHRyYXRpb24iLCAxMCk7CiAgICBTa2lsbENoYW5nZSgiU2VsZkJvbmRhZ2UiLCAxMCk7CiAgICBTa2lsbENoYW5nZSgiV2lsbHBvd2VyIiwgMTApOwogICAgU2tpbGxDaGFuZ2UoIkV2YXNpb24iLCAxMCk7CiAgICBTa2lsbENoYW5nZSgiQm9uZGFnZSIsIDEwKTsKICAgIFNraWxsQ2hhbmdlKCJEcmVzc2FnZSIsIDEwKTsKICAgIFNraWxsQ2hhbmdlKCJMb2NrUGlja2luZyIsIDEwKTsKICAgIHNob3dUb2FzdHNjcGcoKTsKICAgIGZvcmNlY2xvc2VtZW51KCk7CiAgfSBlbHNlIGlmIChzZWxlY3RlZE9wdGlvbiA9PT0gIm9wdDQiKSB7CiAgICBqYXZhc2NyaXB0OlJlcHV0YXRpb25DaGFuZ2UoIkdhbWluZyIsIDEwMCk7CiAgICBSZXB1dGF0aW9uQ2hhbmdlKCJHYW1ibGluZyIsIDEwMCk7CiAgICBSZXB1dGF0aW9uQ2hhbmdlKCJMQVJQIiwgMTAwKTsKICAgIFJlcHV0YXRpb25DaGFuZ2UoIk1haWQiLCAxMDApOwogICAgUmVwdXRhdGlvbkNoYW5nZSgiQUJETCIsIDEwMCk7CiAgICBSZXB1dGF0aW9uQ2hhbmdlKCJOdXJzZSIsIDEwMCk7CiAgICBzaG93VG9hc3RzY3BnKCk7CiAgICBmb3JjZWNsb3NlbWVudSgpOwogIH0gZWxzZSBpZiAoc2VsZWN0ZWRPcHRpb24gPT09ICJvcHQ1IikgewogICAgamF2YXNjcmlwdDpTZXJ2ZXJQbGF5ZXJTeW5jCiAgICBBc3NldEZlbWFsZTNEQ0cuZm9yRWFjaChncm91cD0+Z3JvdXAuQXNzZXQuZm9yRWFjaChpdGVtPT5JbnZlbnRvcnlBZGQoUGxheWVyLCBpdGVtLk5hbWUsIGdyb3VwLkdyb3VwKSkpOwogICAgU2VydmVyUGxheWVySW52ZW50b3J5U3luYygpOwogICAgc2hvd1RvYXN0c2NwZygpOwogICAgZm9yY2VjbG9zZW1lbnUoKTsKICB9IGVsc2UgaWYgKHNlbGVjdGVkT3B0aW9uID09PSAib3B0NiIpIHsKICAgIGphdmFzY3JpcHQ6SW52ZW50b3J5UmVtb3ZlKFBsYXllciwgIkl0ZW1OZWNrIik7CiAgICBDaGF0Um9vbUNoYXJhY3Rlckl0ZW1VcGRhdGUoUGxheWVyLCAiSXRlbU5lY2siKTsKICAgIExvZ0FkZCgiUmVsZWFzZWRDb2xsYXIiLCAiT3duZXJSdWxlIik7IAogICAgc2hvd1RvYXN0c2NwZygpOwogICAgZm9yY2VjbG9zZW1lbnUoKTsKICB9IGVsc2UgaWYgKHNlbGVjdGVkT3B0aW9uID09PSAib3B0NyIpIHsKICAgIGphdmFzY3JpcHQ6YWxlcnQoJ1N0YXJ0IGEgTEFSUCBzZXNzaW9uICYgc2VsZWN0IGNsYXNzIGJlZm9yZSBydW5uaW5nJyk7CiAgICBHYW1lTEFSUExldmVsUHJvZ3Jlc3MoMTAwKSAKICAgIHNob3dUb2FzdHNjcGcoKTsKICAgIGZvcmNlY2xvc2VtZW51KCk7CiAgfSBlbHNlIGlmIChzZWxlY3RlZE9wdGlvbiA9PT0gIm9wdDgiKSB7CiAgICBqYXZhc2NyaXB0OkxvZ0FkZCgiRXNjYXBlZCIsICJBc3lsdW0iLCBDdXJyZW50VGltZSArIDk5OTk5OTk5OSk7CiAgICBzaG93VG9hc3RzY3BnKCk7CiAgICBmb3JjZWNsb3NlbWVudSgpOwogIH0gZWxzZSBpZiAoc2VsZWN0ZWRPcHRpb24gPT09ICJvcHQ5IikgewogICAgamF2YXNjcmlwdDpMb2dBZGQoIkNsdWJTbGF2ZSIsICJNYW5hZ2VtZW50IiwgQ3VycmVudFRpbWUgKyA5OTk5OTk5OTkpOwogICAgc2hvd1RvYXN0c2NwZygpOwogICAgZm9yY2VjbG9zZW1lbnUoKTsKICB9IGVsc2UgaWYgKHNlbGVjdGVkT3B0aW9uID09PSAib3B0MTAiKSB7CiAgICBqYXZhc2NyaXB0OkxvZ0FkZCgiRXNjYXBlZCIsICJBc3lsdW0iLCBDdXJyZW50VGltZSk7CiAgICBMb2dBZGQoIkNsdWJTbGF2ZSIsICJNYW5hZ2VtZW50IiwgQ3VycmVudFRpbWUpOwogICAgTG9nQWRkKCJCbG9ja0NoYW5nZSIsICJSdWxlIiwgQ3VycmVudFRpbWUpOwogICAgTWFuYWdlbWVudElzQ2x1YlNsYXZlID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gZmFsc2UKICAgIH0KICAgIE1hbmFnZW1lbnRDbHViU2xhdmVEaWFsb2cgPSBmdW5jdGlvbihQbGF5ZXIpIHt9CiAgICBNYW5hZ2VtZW50RmluaXNoQ2x1YlNsYXZlKCkKICAgIHNob3dUb2FzdHNjcGcoKTsKICAgIGZvcmNlY2xvc2VtZW51KCk7CiAgfSBlbHNlIGlmIChzZWxlY3RlZE9wdGlvbiA9PT0gIm9wdDExIikgewogICAgamF2YXNjcmlwdDphbGVydCgnU3RhcnQgYSBHR1RTIHNlc3Npb24gYmVmb3JlIHJ1bm5pbmcsIHJlZnJlc2ggdG8gc2VlIGNoYW5nZXMnKTsKICAgIFBsYXllci5HYW1lLkdHVFMuTGV2ZWwgPSBwcm9tcHQoIkVudGVyIEdHVFMgTGV2ZWwgKDEtNikiKTs7CiAgICBTZXJ2ZXJBY2NvdW50VXBkYXRlLlF1ZXVlRGF0YSh7CiAgICBHYW1lOiBQbGF5ZXIuR2FtZQogICAgfSk7CiAgICBzaG93VG9hc3RzY3BnKCk7CiAgICBmb3JjZWNsb3NlbWVudSgpOwogICAgCiAgfWVsc2UgaWYgKHNlbGVjdGVkT3B0aW9uID09PSAib3B0MTIiKSB7CiAgICBqYXZhc2NyaXB0OkRpYWxvZ1NldFJlcHV0YXRpb24oIkRvbWluYW50IiwgcHJvbXB0KCJFbnRlciBTdWIvRG9tIFJlcCAoLTEwMCB0byAxMDApIikpOwogICAgc2hvd1RvYXN0c2NwZygpOwogICAgZm9yY2VjbG9zZW1lbnUoKTsKICB9ZWxzZSBpZiAoc2VsZWN0ZWRPcHRpb24gPT09ICJvcHQxMyIpIHsKICAgIGphdmFzY3JpcHQ6bmFtZSA9IHByb21wdCgiRW50ZXIgTmlja25hbWUiKTs7CiAgICBQbGF5ZXIuTmlja25hbWUgPSBuYW1lOwogICAgU2VydmVyQWNjb3VudFVwZGF0ZS5RdWV1ZURhdGEoeyBOaWNrbmFtZTogbmFtZSB9LCB0cnVlKTsgICAKICAgIHNob3dUb2FzdHNjcGcoKTsKICAgIGZvcmNlY2xvc2VtZW51KCk7ICAKICB9ZWxzZSBpZiAoc2VsZWN0ZWRPcHRpb24gPT09ICJvcHQxNCIpIHsKICAgIGphdmFzY3JpcHQ6QWN0aXZpdHlTZXRBcm91c2FsKFBsYXllciwgMSk7CiAgICBBY3Rpdml0eU9yZ2FzbVByZXBhcmUoUGxheWVyLCB0cnVlKTsKICAgIEFjdGl2aXR5T3JnYXNtR2FtZVJlc2lzdENvdW50ID0gMTsKICAgIHNob3dUb2FzdHNjcGcoKTsKICAgIGZvcmNlY2xvc2VtZW51KCk7CiAgfWVsc2UgaWYgKHNlbGVjdGVkT3B0aW9uID09PSAib3B0MTUiKSB7CiAgICBqYXZhc2NyaXB0OndpbmRvdy5vcGVuKCdodHRwczovL2Rpc2NvcmQuZ2cvdjNKQmp5UzRteCcsICdfYmxhbmsnKTsKICAgIHNob3dUb2FzdHNjcGcoKTsKICAgIGZvcmNlY2xvc2VtZW51KCk7CiAgfWVsc2UgaWYgKHNlbGVjdGVkT3B0aW9uID09PSAib3B0MTYiKSB7CiAgICBqYXZhc2NyaXB0OihmdW5jdGlvbigpIHtsZXQgaW5wdXQgPSBwcm9tcHQoIk1hbGUgLyBGZW1hbGUgLyBNaXhlZCIpOwogICAgbGV0IHBsYWNlaG9sZGVyOwogICAgCiAgICBpZiAoaW5wdXQudG9Mb3dlckNhc2UoKSA9PT0gIm1hbGUiKSB7CiAgICAgIHBsYWNlaG9sZGVyID0gIk0iOwogICAgfSBlbHNlIGlmIChpbnB1dC50b0xvd2VyQ2FzZSgpID09PSAibWl4ZWQiKSB7CiAgICAgIHBsYWNlaG9sZGVyID0gIlgiOwogICAgfSBlbHNlIHsKICAgICAgcGxhY2Vob2xkZXIgPSAiIjsKICAgIH0gIAoKICAgIAogICAgQ2hhdFJvb21TdGFydChwbGFjZWhvbGRlciwgIiIsIG51bGwsIG51bGwsICJJbnRyb2R1Y3Rpb24iLCBCYWNrZ3JvdW5kc1RhZ0xpc3QpOwogIH0pKCk7CiAgICBzaG93VG9hc3RzY3BnKCk7CiAgICBmb3JjZWNsb3NlbWVudSgpOwogIH1lbHNlIGlmIChzZWxlY3RlZE9wdGlvbiA9PT0gIm9wdDE3IikgewogICAgamF2YXNjcmlwdDooZnVuY3Rpb24oKSB7bGV0IGlucHV0ID0gcHJvbXB0KCJTdGFydCBhIExBUlAgUm9vbSBhcyBBZG1pbiBGaXJzdFxuU3RhcnQgLyBTa2lwIC8gTWl4ZWQgLyBTaHVmZmxlIC8gVGVhbSAvIFdpbiAoY29sb3IpIikudG9Mb3dlckNhc2UoKTsKCiAgICBpZiAoaW5wdXQgPT09ICJzdGFydCIpIHsKICAgICAgU2VydmVyU2VuZCgiQ2hhdFJvb21HYW1lIiwgeyBHYW1lUHJvZ3Jlc3M6ICJTdGFydCIgfSk7CiAgICB9IGVsc2UgaWYgKGlucHV0ID09PSAic2tpcCIpIHsKICAgICAgU2VydmVyU2VuZCgiQ2hhdFJvb21HYW1lIiwgeyBHYW1lUHJvZ3Jlc3M6ICJTa2lwIiB9KTsKICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09ICJzaHVmZmxlIikgewogICAgICBTZXJ2ZXJTZW5kKCJDaGF0Um9vbUFkbWluIiwgeyBNZW1iZXJOdW1iZXI6IENoYXRSb29tQ2hhcmFjdGVyWzFdLk1lbWJlck51bWJlciwgQWN0aW9uOiAiU2h1ZmZsZSIgfSk7CiAgICB9IGVsc2UgaWYgKGlucHV0ID09PSAidGVhbSIpIHsKICAgICAgY29uc3QgRGljdGlvbmFyeSA9IG5ldyBEaWN0aW9uYXJ5QnVpbGRlcigpCiAgICAgIC5zb3VyY2VDaGFyYWN0ZXIoUGxheWVyKQogICAgICAuYnVpbGQoKTsKICAgIFNlcnZlclNlbmQoIkNoYXRSb29tQ2hhdCIsIHsgQ29udGVudDogIkxBUlBDaGFuZ2VUZWFtQ2xhc3MiLCBUeXBlOiAiQWN0aW9uIiwgRGljdGlvbmFyeTogRGljdGlvbmFyeSB9KTsKICB9IGVsc2UgaWYgKGlucHV0LnN0YXJ0c1dpdGgoIndpbiIpKSB7CiAgICAgIGxldCBjb2xvciA9IGlucHV0LnNsaWNlKDQpLnRyaW0oKTsKICAgICAgY29sb3IgPSBjb2xvci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNvbG9yLnNsaWNlKDEpOwogICAgICBHYW1lTEFSUEFkZENoYXRMb2coIkVuZEdhbWUiLCBQbGF5ZXIsIFBsYXllciwgT25saW5lR2FtZURpY3Rpb25hcnlUZXh0KCJUZWFtIiArIGNvbG9yKSwgMCwgMCwgIiMwMDAwQjAiKTsKICAgIH0KICB9KSgpOwoKICAgIHNob3dUb2FzdHNjcGcoKTsKICAgIGZvcmNlY2xvc2VtZW51KCk7CiAgfWVsc2UgaWYgKHNlbGVjdGVkT3B0aW9uID09PSAib3B0MTgiKSB7CiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChidXR0b25Db250YWluZXIpOwogIGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICB9ZWxzZSBpZiAoc2VsZWN0ZWRPcHRpb24gPT09ICJvcHQxOSIpIHsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2V0dGluZ3NNZW51KTsKICAgIHNldHRpbmdzTWVudS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICAgIHNob3dUb2FzdHNjcGcoKTsKICAgIGZvcmNlY2xvc2VtZW51KCk7CiAgfQogIAoKICAvLyBIaWRlIGRkIG1lbnUKICBzZWxlY3Quc3R5bGUuZGlzcGxheSA9ICJub25lIjsKfSk7CgovL0VuZCBvZiBERCBtZW51X19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCgpmdW5jdGlvbiB1cGRhdGVDb250ZXh0TWVudSgpIHsKICB3aGlsZSAoY29udGV4dE1lbnUuZmlyc3RDaGlsZCkgewogICAgY29udGV4dE1lbnUucmVtb3ZlQ2hpbGQoY29udGV4dE1lbnUuZmlyc3RDaGlsZCk7CiAgfQogIGNvbnRleHRNZW51LmFwcGVuZENoaWxkKGhlYWRlcik7CiAgY29udGV4dE1lbnUuYXBwZW5kQ2hpbGQoY3JlYXRlU2VwYXJhdG9yKCkpOwogIGNvbnRleHRNZW51LmFwcGVuZENoaWxkKGJ1dHRvbjEpOwogIGNvbnRleHRNZW51LmFwcGVuZENoaWxkKGJ1dHRvbjIpOwogIGNvbnRleHRNZW51LmFwcGVuZENoaWxkKGJ1dHRvbjMpOwogIGNvbnRleHRNZW51LmFwcGVuZENoaWxkKGJ1dHRvbjQpOwogIGNvbnRleHRNZW51LmFwcGVuZENoaWxkKGJ1dHRvbjUpOwogIGNvbnRleHRNZW51LmFwcGVuZENoaWxkKGJ1dHRvbjYpOwogIGNvbnRleHRNZW51LmFwcGVuZENoaWxkKGJ1dHRvbjcpOwogIGlmICh2aXNiKSB7CiAgICBjb250ZXh0TWVudS5hcHBlbmRDaGlsZChidXR0b244KTsKICB9IGVsc2UgewogICAgY29udGV4dE1lbnUuYXBwZW5kQ2hpbGQoYnV0dG9uOSk7CiAgfQogIGNvbnRleHRNZW51LmFwcGVuZENoaWxkKGJ1dHRvbjEwKTsKICAvLyBBZGQgdGhlIGRkIG1lbnUgdG8gdGhlIGNvbnRleHQgbWVudQogIGNvbnRleHRNZW51LmFwcGVuZENoaWxkKGNyZWF0ZVNlcGFyYXRvcigpKTsKICBjb250ZXh0TWVudS5hcHBlbmRDaGlsZChkcm9wZG93bkJ1dHRvbik7CiAgY29udGV4dE1lbnUuYXBwZW5kQ2hpbGQoc2VsZWN0KTsKICAKfQp1cGRhdGVDb250ZXh0TWVudSgpOwovLyBFdmVudCBsaXN0ZW5lciB0byB1cGRhdGUgdGhlIG1lbnUgd2hlbiBvcGVuZWQKY29udGV4dE1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBmdW5jdGlvbigpIHsKICB1cGRhdGVDb250ZXh0TWVudSgpOwp9KTsKZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250ZXh0TWVudSk7Cn0pOwoKLy8gSGlkZSB0aGUgY3VzdG9tIGNvbnRleHQgbWVudQpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKCkgewogICAgaWYgKGNvbnRleHRNZW51T3BlbikgewogICAgICAgIHZhciBjb250ZXh0TWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImRpdltzdHlsZSo9J2ZpeGVkJ10iKTsKICAgICAgICBpZiAoY29udGV4dE1lbnUpIHsKICAgICAgICAgICAgY29udGV4dE1lbnUuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICAgICAgQ2hhdFJvb21DbGlja0NoYXJhY3RlcihQbGF5ZXIpOwogICAgICAgICAgICBEaWFsb2dMZWF2ZSgpOwogICAgICAgIH0KICAgICAgICBjb250ZXh0TWVudU9wZW4gPSBmYWxzZTsKICAgIH0KfSk7CgoKLy9TdGFydCBvZiBrZXlib2FyZCBzaG9ydGN1dHNfX19fX19fX19fX19fX19fX19fCgpsZXQgYmFja3RpY2tQcmVzc2VkID0gZmFsc2U7CmxldCBsYXN0S2V5UHJlc3NlZCA9IG51bGw7Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIiwgZnVuY3Rpb24oZXZlbnQpIHsKICBpZiAoZXZlbnQua2V5ID09PSAiYCIgJiYgIWJhY2t0aWNrUHJlc3NlZCkgewogICAgYmFja3RpY2tQcmVzc2VkID0gdHJ1ZTsKICB9CiAgZWxzZSBpZiAoYmFja3RpY2tQcmVzc2VkKSB7CiAgICBsYXN0S2V5UHJlc3NlZCA9IGV2ZW50LmtleTsKICB9Cn0pOwoKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigia2V5dXAiLCBmdW5jdGlvbihldmVudCkgewogIGlmIChldmVudC5rZXkgPT09ICJgIikgewogICAgYmFja3RpY2tQcmVzc2VkID0gZmFsc2U7CiAgICBsYXN0S2V5UHJlc3NlZCA9IG51bGw7CiAgfQp9KTsKCnNldEludGVydmFsKGZ1bmN0aW9uKCkgewogIGlmIChsYXN0S2V5UHJlc3NlZCA9PT0gIiwiIHx8IGxhc3RLZXlQcmVzc2VkID09PSAiLiIpIHsKICAgIGxldCBhY3Rpb24gPSBsYXN0S2V5UHJlc3NlZCA9PT0gIiwiID8gIk1vdmVMZWZ0IiA6ICJNb3ZlUmlnaHQiOwogICAgU2VydmVyU2VuZCgiQ2hhdFJvb21BZG1pbiIsIHsKICAgICAgTWVtYmVyTnVtYmVyOiBQbGF5ZXIuTWVtYmVyTnVtYmVyLAogICAgICBBY3Rpb246IGFjdGlvbiwKICAgIH0pOwogIH0KfSwgNTApOwovL1N0YXJ0IG9mIFBlcnNpc3RhbnQgTWVudSBfX19fX19fX19fX19fX19fX19fX18KCmNvbnN0IHNldHRpbmdzTWVudSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwpzZXR0aW5nc01lbnUuaWQgPSAic2V0dGluZ3MtbWVudSI7CnNldHRpbmdzTWVudS5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7CnNldHRpbmdzTWVudS5zdHlsZS50b3AgPSAiMjBweCI7CnNldHRpbmdzTWVudS5zdHlsZS5sZWZ0ID0gIjIwcHgiOwpzZXR0aW5nc01lbnUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNmZmYiOwpzZXR0aW5nc01lbnUuc3R5bGUuYm9yZGVyID0gIjFweCBzb2xpZCAjY2NjIjsKc2V0dGluZ3NNZW51LnN0eWxlLnBhZGRpbmcgPSAiM3B4IjsKc2V0dGluZ3NNZW51LnN0eWxlLmJvcmRlclJhZGl1cyA9ICIxMHB4IjsKc2V0dGluZ3NNZW51LnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CnNldHRpbmdzTWVudS5zdHlsZS56SW5kZXggPSAiOTk5OSI7CgovL0JDTSBsb2dvICAgCmNvbnN0IEJDTUVsb2dvMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImltZyIpOwpCQ01FbG9nbzEuc3JjID0gImh0dHBzOi8vbWVkaWEuZGlzY29yZGFwcC5uZXQvYXR0YWNobWVudHMvNzgxNzQ5MjI5MzMxOTM5MzI4LzEwNzk2NTkwMTY5MTkxOTU3NDgvYjY2NDE5MTE3ODk3YTk4OC5wbmc/d2lkdGg9MTE5MCZoZWlnaHQ9MTE4OSI7CkJDTUVsb2dvMS5zdHlsZS5mbG9hdCA9ICJsZWZ0IjsKQkNNRWxvZ28xLnN0eWxlLm1hcmdpblJpZ2h0ID0gIjEwcHgiOwpCQ01FbG9nbzEuc3R5bGUud2lkdGggPSAiNDBweCI7IApCQ01FbG9nbzEuc3R5bGUuaGVpZ2h0ID0gIjQwcHgiOyAKc2V0dGluZ3NNZW51LmFwcGVuZENoaWxkKEJDTUVsb2dvMSk7CgovL09wdGlvbnMgYW5kIHN0eWxlX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCmNvbnN0IG9wdGlvbjEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsYWJlbCIpOwpvcHRpb24xLnRleHRDb250ZW50ID0gIkFudGlibGluZCI7CmNvbnN0IGNoZWNrYm94MSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CmNoZWNrYm94MS50eXBlID0gImNoZWNrYm94IjsKY2hlY2tib3gxLmlkID0gIm9wdGlvbjEiOwpjaGVja2JveDEuc3R5bGUubWFyZ2luUmlnaHQgPSAiNXB4IjsKY2hlY2tib3gxLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAibWlkZGxlIjsKb3B0aW9uMS5hcHBlbmRDaGlsZChjaGVja2JveDEpOwpzZXR0aW5nc01lbnUuYXBwZW5kQ2hpbGQob3B0aW9uMSk7Cgpjb25zdCBvcHRpb24yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsKb3B0aW9uMi50ZXh0Q29udGVudCA9ICJSZWFsaXN0aWMgVGFsa2luZyI7CmNvbnN0IGNoZWNrYm94MiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CmNoZWNrYm94Mi50eXBlID0gImNoZWNrYm94IjsKY2hlY2tib3gyLmlkID0gIm9wdGlvbjIiOwpjaGVja2JveDIuc3R5bGUubWFyZ2luUmlnaHQgPSAiNXB4IjsKY2hlY2tib3gyLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAibWlkZGxlIjsKb3B0aW9uMi5hcHBlbmRDaGlsZChjaGVja2JveDIpOwpzZXR0aW5nc01lbnUuYXBwZW5kQ2hpbGQob3B0aW9uMik7Cgpjb25zdCBvcHRpb24zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsKb3B0aW9uMy50ZXh0Q29udGVudCA9ICJTb3VuZCI7CmNvbnN0IGNoZWNrYm94MyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CmNoZWNrYm94My50eXBlID0gImNoZWNrYm94IjsKY2hlY2tib3gzLmlkID0gIm9wdGlvbjMiOwpjaGVja2JveDMuc3R5bGUubWFyZ2luUmlnaHQgPSAiNXB4IjsKY2hlY2tib3gzLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAibWlkZGxlIjsKb3B0aW9uMy5hcHBlbmRDaGlsZChjaGVja2JveDMpOwpzZXR0aW5nc01lbnUuYXBwZW5kQ2hpbGQob3B0aW9uMyk7CgpvcHRpb24xLnN0eWxlLmRpc3BsYXkgPSAiZmxleCI7Cm9wdGlvbjEuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAiY2VudGVyIjsKb3B0aW9uMS5zdHlsZS5hbGlnbkl0ZW1zID0gImNlbnRlciI7Cm9wdGlvbjEuc3R5bGUubWFyZ2luQm90dG9tID0gIjEwcHgiOwpvcHRpb24xLnN0eWxlLnBhZGRpbmcgPSAiNXB4IjsKb3B0aW9uMS5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiNXB4IjsKb3B0aW9uMS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2YyZjJmMiI7CgpvcHRpb24yLnN0eWxlLmRpc3BsYXkgPSAiZmxleCI7Cm9wdGlvbjIuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAiY2VudGVyIjsKb3B0aW9uMi5zdHlsZS5hbGlnbkl0ZW1zID0gImNlbnRlciI7Cm9wdGlvbjIuc3R5bGUubWFyZ2luQm90dG9tID0gIjEwcHgiOwpvcHRpb24yLnN0eWxlLnBhZGRpbmcgPSAiNXB4IjsKb3B0aW9uMi5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiNXB4IjsKb3B0aW9uMi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2YyZjJmMiI7CgpvcHRpb24zLnN0eWxlLmRpc3BsYXkgPSAiZmxleCI7Cm9wdGlvbjMuc3R5bGUuanVzdGlmeUNvbnRlbnQgPSAiY2VudGVyIjsKb3B0aW9uMy5zdHlsZS5hbGlnbkl0ZW1zID0gImNlbnRlciI7Cm9wdGlvbjMuc3R5bGUubWFyZ2luQm90dG9tID0gIjEwcHgiOwpvcHRpb24zLnN0eWxlLnBhZGRpbmcgPSAiNXB4IjsKb3B0aW9uMy5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiNXB4IjsKb3B0aW9uMy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2YyZjJmMiI7CgpvcHRpb24xLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlZW50ZXIiLCBmdW5jdGlvbigpIHsKICBvcHRpb24xLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjZGRkIjsKICBvcHRpb24xLnN0eWxlLmN1cnNvciA9ICJwb2ludGVyIjsKfSk7CgpvcHRpb24xLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlbGVhdmUiLCBmdW5jdGlvbigpIHsKICBpZiAoY2hlY2tib3gxLmNoZWNrZWQpIHsKICAgIG9wdGlvbjEuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gImxpZ2h0Z3JlZW4iOwogIH0gZWxzZSB7CiAgICBvcHRpb24xLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjZjJmMmYyIjsKICB9Cn0pOwoKb3B0aW9uMi5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWVudGVyIiwgZnVuY3Rpb24oKSB7CiAgb3B0aW9uMi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2RkZCI7CiAgb3B0aW9uMi5zdHlsZS5jdXJzb3IgPSAicG9pbnRlciI7Cn0pOwoKb3B0aW9uMi5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWxlYXZlIiwgZnVuY3Rpb24oKSB7CiAgaWYgKGNoZWNrYm94Mi5jaGVja2VkKSB7CiAgICBvcHRpb24yLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICJsaWdodGdyZWVuIjsKICB9IGVsc2UgewogICAgb3B0aW9uMi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2YyZjJmMiI7CiAgfQp9KTsKCm9wdGlvbjMuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VlbnRlciIsIGZ1bmN0aW9uKCkgewogIG9wdGlvbjMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNkZGQiOwogIG9wdGlvbjMuc3R5bGUuY3Vyc29yID0gInBvaW50ZXIiOwp9KTsKCm9wdGlvbjMuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VsZWF2ZSIsIGZ1bmN0aW9uKCkgewogIGlmIChjaGVja2JveDMuY2hlY2tlZCkgewogICAgb3B0aW9uMy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAibGlnaHRncmVlbiI7CiAgfSBlbHNlIHsKICAgIG9wdGlvbjMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNmMmYyZjIiOwogIH0KfSk7CgovLyBDaGVja2JveCBzdGF0ZSB3aGVuIHRoZSBwYWdlIGxvYWRzCmNoZWNrYm94MS5jaGVja2VkID8gb3B0aW9uMS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2QxZjdjNCIgOiBvcHRpb24xLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjZjJmMmYyIjsKY2hlY2tib3gyLmNoZWNrZWQgPyBvcHRpb24yLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjZDFmN2M0IiA6IG9wdGlvbjIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNmMmYyZjIiOwpjaGVja2JveDMuY2hlY2tlZCA/IG9wdGlvbjMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNkMWY3YzQiIDogb3B0aW9uMy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2YyZjJmMiI7CgoKLy8gQ2hhbmdlIGxhYmVsIGJhY2tncm91bmQgY29sb3Igd2hlbiB0aGUgY2hlY2tib3ggaXMgY2hlY2tlZApjaGVja2JveDEuYWRkRXZlbnRMaXN0ZW5lcigiY2hhbmdlIiwgZnVuY3Rpb24oKSB7CiAgaWYgKGNoZWNrYm94MS5jaGVja2VkKSB7CiAgICBvcHRpb24xLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjZDFmN2M0IjsKICB9IGVsc2UgewogICAgb3B0aW9uMS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2YyZjJmMiI7CiAgfQp9KTsKCmNoZWNrYm94Mi5hZGRFdmVudExpc3RlbmVyKCJjaGFuZ2UiLCBmdW5jdGlvbigpIHsKICBpZiAoY2hlY2tib3gyLmNoZWNrZWQpIHsKICAgIG9wdGlvbjIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNkMWY3YzQiOwogIH0gZWxzZSB7CiAgICBvcHRpb24yLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICIjZjJmMmYyIjsKICB9Cn0pOwoKY2hlY2tib3gzLmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIGZ1bmN0aW9uKCkgewogIGlmIChjaGVja2JveDMuY2hlY2tlZCkgewogICAgb3B0aW9uMy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiI2QxZjdjNCI7CiAgfSBlbHNlIHsKICAgIG9wdGlvbjMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIiNmMmYyZjIiOwogIH0KfSk7CgovL09wdGlvbnMgQWN0aW9uc19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCgpmdW5jdGlvbiBydW5PcHRpb24xKCkgewogICAgaWYgKGNoZWNrYm94MS5jaGVja2VkKSB7CiAgICAgIGZ1bmN0aW9uIEdldEJsaW5kTGV2ZWwwKCkgewogICAgICAgIGxldCBibGluZExldmVsID0gMDsKICAgICAgICByZXR1cm4gYmxpbmRMZXZlbDsKICAgICAgfQogICAgICBQbGF5ZXIuR2V0QmxpbmRMZXZlbCA9IEdldEJsaW5kTGV2ZWwwOwogICAgICBQbGF5ZXIuR2V0QmxpbmRMZXZlbCgpOwogICAgfQogIH0KICAKICBmdW5jdGlvbiBydW5PcHRpb24yKCkgewogICAgZnVuY3Rpb24gUnVuRXhwcmVzc2lvbkFuaW1hdGlvblN0ZXAoKSB7CiAgICAgIENoYXJhY3RlclNldEZhY2lhbEV4cHJlc3Npb24oUGxheWVyLCAiTW91dGgiLCBleHByZXNzaW9uQW5pbWF0aW9uW2V4cHJlc3Npb25BbmltYXRpb25JbmRleCsrXSk7CiAgICAgIGlmIChleHByZXNzaW9uQW5pbWF0aW9uSW5kZXggPCBleHByZXNzaW9uQW5pbWF0aW9uLmxlbmd0aCkgewogICAgICAgIHNldFRpbWVvdXQoUnVuRXhwcmVzc2lvbkFuaW1hdGlvblN0ZXAsIDEwMDApOwogICAgICB9IGVsc2UgewogICAgICAgIGV4cHJlc3Npb25BbmltYXRpb24gPSBudWxsOwogICAgICB9CiAgICB9CiAgCiAgICBmdW5jdGlvbiBSdW5FeHByZXNzaW9uQW5pbWF0aW9uKGxpc3QpIHsKICAgICAgaWYgKGV4cHJlc3Npb25BbmltYXRpb24pIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgZXhwcmVzc2lvbkFuaW1hdGlvbiA9IGxpc3Q7CiAgICAgIGV4cHJlc3Npb25BbmltYXRpb25JbmRleCA9IDA7CiAgICAgIGV4cHJlc3Npb25BbmltYXRpb25FeCA9IEludmVudG9yeUdldChQbGF5ZXIsICJNb3V0aCIpOwogICAgICBpZiAoZXhwcmVzc2lvbkFuaW1hdGlvbkV4ICYmIGV4cHJlc3Npb25BbmltYXRpb25FeC5Qcm9wZXJ0eSAmJiBleHByZXNzaW9uQW5pbWF0aW9uRXguUHJvcGVydHkuRXhwcmVzc2lvbikgewogICAgICAgIGV4cHJlc3Npb25BbmltYXRpb25bZXhwcmVzc2lvbkFuaW1hdGlvbi5sZW5ndGggLSAxXSA9IGV4cHJlc3Npb25BbmltYXRpb25FeC5Qcm9wZXJ0eS5FeHByZXNzaW9uOyAvL3NldCBsYXN0IHRvIGN1cnJlbnQKICAgICAgfQogICAgICBSdW5FeHByZXNzaW9uQW5pbWF0aW9uU3RlcCgpOwogICAgfQogIAogICAgZnVuY3Rpb24gTkVXdGFsa2luZygpIHsKICAgICAgdmFyIG1zZyA9IEVsZW1lbnRWYWx1ZSgiSW5wdXRDaGF0IikudHJpbSgpOwogICAgICBpZiAoIW1zZy5zdGFydHNXaXRoKCIvIikgJiYgIW1zZy5zdGFydHNXaXRoKCIqIikgJiYgIW1zZy5zdGFydHNXaXRoKCIhIikpIHsKICAgICAgICBpZiAobXNnLmxlbmd0aCA+IDEwKSB7CiAgICAgICAgICBSdW5FeHByZXNzaW9uQW5pbWF0aW9uKFtudWxsLCAiR3JpbiIsICJTbWlyayIsIG51bGwsICJHcmluIiwgIlNtaXJrIiwgbnVsbF0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBSdW5FeHByZXNzaW9uQW5pbWF0aW9uKFtudWxsLCAiR3JpbiIsICJTbWlyayIsIG51bGxdKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgT0xEdGFsa2luZygpOwogICAgfQogIAogICAgaWYgKGNoZWNrYm94Mi5jaGVja2VkKSB7CiAgICAgIHZhciBleHByZXNzaW9uQW5pbWF0aW9uOwogICAgICB2YXIgZXhwcmVzc2lvbkFuaW1hdGlvbkluZGV4ID0gMDsKICAgICAgdmFyIE9MRHRhbGtpbmcgPSBDaGF0Um9vbVNlbmRDaGF0OwogICAgICBDaGF0Um9vbVNlbmRDaGF0ID0gTkVXdGFsa2luZzsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJ1bk9wdGlvbjMoKSB7CiAgICBpZiAoY2hlY2tib3gzLmNoZWNrZWQpIHsKICAgICAgZnVuY3Rpb24gc2hvd1RvYXN0c2NwZygpIHsKICAgICAgICBBdWRpb1BsYXlJbnN0YW50U291bmQoImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzc4MTc0OTIyOTMzMTkzOTMyOC8xMDkwNTMwNDc5MDgzNjMwNjcyL2g0MnZ3Y2Qtbm90aWZpY2F0aW9uLTFfdk1xaFZsdFMubXAzIiwgMSk7CiAgICAgICAgLy8gQ3JlYXRlIHRoZSB0b2FzdCBjb250YWluZXIKICAgICAgICB2YXIgdG9hc3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7CiAgICAgICAgdG9hc3RDb250YWluZXIuc3R5bGUuYm90dG9tID0gIjVweCI7CiAgICAgICAgdG9hc3RDb250YWluZXIuc3R5bGUucmlnaHQgPSAiNXB4IjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAid2hpdGUiOwogICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmNvbG9yID0gIiMxNDE0MTQiOwogICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLnBhZGRpbmcgPSAiNXB4IjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5ib3JkZXIgPSAiMnB4IHNvbGlkICM0Q0FGNTAiOwogICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmJvcmRlclJhZGl1cyA9ICI1cHgiOwogICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmJveFNoYWRvdyA9ICIycHggMnB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjUpIjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLnpJbmRleCA9ICI5OTkiOwogICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLnRyYW5zaXRpb24gPSAib3BhY2l0eSAwLjVzIGVhc2UtaW4tb3V0IjsKICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gIjAiOwogICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAiZmxleCI7CiAgICAgICAgdG9hc3RDb250YWluZXIuc3R5bGUuYWxpZ25JdGVtcyA9ICJjZW50ZXIiOwogICAgICAgIHZhciBzdGF0dXNCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIHN0YXR1c0Jhci5zdHlsZS53aWR0aCA9ICIxMDAlIjsKICAgIHN0YXR1c0Jhci5zdHlsZS5oZWlnaHQgPSAiM3B4IjsKICAgIHN0YXR1c0Jhci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiYmxhY2siOwogICAgc3RhdHVzQmFyLnN0eWxlLnBvc2l0aW9uID0gImFic29sdXRlIjsKICAgIHN0YXR1c0Jhci5zdHlsZS5ib3R0b20gPSAiMCI7CiAgICBzdGF0dXNCYXIuc3R5bGUubGVmdCA9ICIwIjsKICAgIHN0YXR1c0Jhci5zdHlsZS50cmFuc2l0aW9uID0gIndpZHRoIDVzIGVhc2UtaW4tb3V0IjsKICAgIHN0YXR1c0Jhci5zdHlsZS53aWR0aCA9ICIwJSI7CiAgICB0b2FzdENvbnRhaW5lci5hcHBlbmRDaGlsZChzdGF0dXNCYXIpOwogICAgCiAgICAvLyBTdGF0dXMgYmFyIHdpZHRoIHdoaWxlIGNvdW50aW5nIGRvd24KICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgIHN0YXR1c0Jhci5zdHlsZS53aWR0aCA9ICIxMDAlIjsKICAgIH0sIDApOwogICAgdmFyIGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbWciKTsKICAgIGljb24uc3JjID0gImh0dHBzOi8vbWVkaWEuZGlzY29yZGFwcC5uZXQvYXR0YWNobWVudHMvNzgxNzQ5MjI5MzMxOTM5MzI4LzEwNzk2NTkwMTY5MTkxOTU3NDgvYjY2NDE5MTE3ODk3YTk4OC5wbmc/d2lkdGg9MTE5MCZoZWlnaHQ9MTE4OSI7CiAgICBpY29uLnN0eWxlLndpZHRoID0gIjIzcHgiOwogICAgaWNvbi5zdHlsZS5oZWlnaHQgPSAiMjNweCI7CiAgICBpY29uLnN0eWxlLmJvcmRlclJhZGl1cyA9ICI1MCUiOwogICAgaWNvbi5zdHlsZS5tYXJnaW5SaWdodCA9ICItMzBweCI7CiAgICBpY29uLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICItNXB4IjsKICAgIHRvYXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKGljb24pOwogICAgdmFyIHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICB0ZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAiYm9sZCI7CiAgICB0ZXh0LnN0eWxlLm1hcmdpbkxlZnQgPSAiMzVweCI7CiAgICB0ZXh0LmlubmVySFRNTCA9ICJBY3Rpb24gU3VjY2Vzc2Z1bGx5IEV4ZWN1dGVkIjsKICAgIHRvYXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHRleHQpOwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0b2FzdENvbnRhaW5lcik7CiAgICAgIAogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICAgICAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAiMSI7CiAgICAgICAgfSwgMCk7CiAgICAgIAogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gIjAiOwogICAgICAgIH0sIDUwMDApOwogICAgICAKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgdG9hc3RDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICB9LCA1NTAwKTsKICAgICAgICBzZW5kRmRlYnVnKCk7CiAgICAKICAgICAgfQoKICAgIH0KICB9CgogIC8vIExvYWQgY2hlY2tib3ggc3RhdGVzIGZyb20gbG9jYWwgc3RvcmFnZQogIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgib3B0aW9uMSIpICE9PSBudWxsKSB7CiAgICBjaGVja2JveDEuY2hlY2tlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJvcHRpb24xIikgPT09ICJ0cnVlIjsKICAgIGlmIChjaGVja2JveDEuY2hlY2tlZCkgewogICAgICBzZXRJbnRlcnZhbChydW5PcHRpb24xLCAxMDAwKTsKICAgIH0KICB9CiAgCiAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJvcHRpb24yIikgIT09IG51bGwpIHsKICAgIGNoZWNrYm94Mi5jaGVja2VkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oIm9wdGlvbjIiKSA9PT0gInRydWUiOwogICAgaWYgKGNoZWNrYm94Mi5jaGVja2VkKSB7CiAgICAgIHNldEludGVydmFsKHJ1bk9wdGlvbjIsIDEwMDApOwogICAgfQogIH0KCiAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJvcHRpb24zIikgIT09IG51bGwpIHsKICAgIGNoZWNrYm94My5jaGVja2VkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oIm9wdGlvbjMiKSA9PT0gInRydWUiOwogICAgaWYgKGNoZWNrYm94My5jaGVja2VkKSB7CiAgICAgIHNldEludGVydmFsKHJ1bk9wdGlvbjMsIDEwMDApOwogICAgfQogIH0KICAKICBjaGVja2JveDEuYWRkRXZlbnRMaXN0ZW5lcigiY2hhbmdlIiwgZnVuY3Rpb24oKSB7CiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgib3B0aW9uMSIsIGNoZWNrYm94MS5jaGVja2VkKTsKICAgIGlmIChjaGVja2JveDEuY2hlY2tlZCkgewogICAgICBzZXRJbnRlcnZhbChydW5PcHRpb24xLCAxMDAwKTsKICAgIH0KICB9KTsKICAKICBjaGVja2JveDIuYWRkRXZlbnRMaXN0ZW5lcigiY2hhbmdlIiwgZnVuY3Rpb24oKSB7CiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgib3B0aW9uMiIsIGNoZWNrYm94Mi5jaGVja2VkKTsKICAgIGlmIChjaGVja2JveDIuY2hlY2tlZCkgewogICAgICBzZXRJbnRlcnZhbChydW5PcHRpb24yLCAxMDAwKTsKICAgIH0KICB9KTsKCiAgY2hlY2tib3gzLmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIGZ1bmN0aW9uKCkgewogICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oIm9wdGlvbjMiLCBjaGVja2JveDMuY2hlY2tlZCk7CiAgICBpZiAoY2hlY2tib3gzLmNoZWNrZWQpIHsKICAgICAgc2V0SW50ZXJ2YWwocnVuT3B0aW9uMywgMTAwMCk7CiAgICB9CiAgfSk7CiAgCgovL09wdGlvbnMgU3RhdGVzX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KCi8vIFNhdmUgY2hlY2tib3ggc3RhdGVzIHRvIGxvY2FsIHN0b3JhZ2UgCmNoZWNrYm94MS5hZGRFdmVudExpc3RlbmVyKCJjaGFuZ2UiLCBmdW5jdGlvbigpIHsKICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgib3B0aW9uMSIsIGNoZWNrYm94MS5jaGVja2VkKTsKfSk7CgpjaGVja2JveDIuYWRkRXZlbnRMaXN0ZW5lcigiY2hhbmdlIiwgZnVuY3Rpb24oKSB7CiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oIm9wdGlvbjIiLCBjaGVja2JveDIuY2hlY2tlZCk7Cn0pOwoKY2hlY2tib3gzLmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIGZ1bmN0aW9uKCkgewogIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCJvcHRpb24zIiwgY2hlY2tib3gzLmNoZWNrZWQpOwp9KTsKCgpkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNldHRpbmdzTWVudSk7CgpsZXQgaXNCYWNrdGlja1ByZXNzZWQgPSBmYWxzZTsKbGV0IGlzU1ByZXNzZWQgPSBmYWxzZTsKCmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBmdW5jdGlvbihldmVudCkgewogIGlmIChldmVudC5rZXkgPT09ICJgIikgewogICAgaXNCYWNrdGlja1ByZXNzZWQgPSB0cnVlOwogIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAicyIpIHsKICAgIGlzU1ByZXNzZWQgPSB0cnVlOwogIH0KCiAgaWYgKGlzQmFja3RpY2tQcmVzc2VkICYmIGlzU1ByZXNzZWQpIHsKICAgIHNldHRpbmdzTWVudS5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICB9Cn0pOwoKLy8gSGlkZSBzZXR0aW5ncyBtZW51IHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9mZgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gZXZlbnQudGFyZ2V0OwogICAgY29uc3QgaXNTZXR0aW5nc01lbnUgPSAhIXRhcmdldEVsZW1lbnQuY2xvc2VzdCgiI3NldHRpbmdzLW1lbnUiKTsKICAgIAogICAgaWYgKCFpc1NldHRpbmdzTWVudSkgewogICAgICBzZXR0aW5nc01lbnUuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgIH0KICB9KTsKICAKICAKCiAgCgovLyBDbGVhciBmbGFncyB3aGVuIHRoZSB1c2VyIHJlbGVhc2VzIGVpdGhlciBrZXkKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigia2V5dXAiLCBmdW5jdGlvbihldmVudCkgewogIGlmIChldmVudC5rZXkgPT09ICJgIikgewogICAgaXNCYWNrdGlja1ByZXNzZWQgPSBmYWxzZTsKICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gInMiKSB7CiAgICBpc1NQcmVzc2VkID0gZmFsc2U7CiAgfQp9KTsKCgovL0VuZCBvZiBQZXJzaXN0YW50IE1lbnUgX19fX19fX19fX19fX19fX19fX19fCgovL1N0YXJ0IG9mIEVtb3RlIE1lbnUgX19fX19fX19fX19fX19fX19fX19fCgpjb25zdCBidXR0b25EYXRhID0gWwogIHsgbmFtZTogIlB1bGwtVXBzIiwgYWN0aW9uOiAoKSA9PiB7CiAgICAgICAgc2hvd1RvYXN0c2NwZygpOwogICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCBudWxsKTsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgIkxlZ3NPcGVuIik7CiAgICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCAiT3ZlclRoZUhlYWQiKTsKICAgICAgICAgICAgSW52ZW50b3J5R2V0KFBsYXllciwgIkVtb3RpY29uIikuUHJvcGVydHkuT3ZlcnJpZGVIZWlnaHQgPSB7CiAgICAgICAgICAgICAgICBIZWlnaHQ6IDEzMAogICAgICAgICAgICB9OwogICAgICAgICAgICBDdXJyZW50U2NyZWVuID09PSAiQ2hhdFJvb20iID8KICAgICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogICAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICAgIH0sIDEwMDApOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCAiWW9rZWQiKTsKICAgICAgICAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsICJMZWdzQ2xvc2VkIik7CiAgICAgICAgICAgIEludmVudG9yeUdldChQbGF5ZXIsICJFbW90aWNvbiIpLlByb3BlcnR5Lk92ZXJyaWRlSGVpZ2h0ID0gewogICAgICAgICAgICAgICAgSGVpZ2h0OiAyNTAKICAgICAgICAgICAgfTsKICAgICAgICAgICAgQ3VycmVudFNjcmVlbiA9PT0gIkNoYXRSb29tIiA/CiAgICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpIDoKICAgICAgICAgICAgICAgIENoYXJhY3RlclJlZnJlc2goUGxheWVyKTsKICAgICAgICB9LCAyMDAwKTsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewoKICAgICAgICAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsICJMZWdzT3BlbiIpOwogICAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgIk92ZXJUaGVIZWFkIikKICAgICAgICAgICAgSW52ZW50b3J5R2V0KFBsYXllciwgIkVtb3RpY29uIikuUHJvcGVydHkuT3ZlcnJpZGVIZWlnaHQgPSB7CiAgICAgICAgICAgICAgICBIZWlnaHQ6IDEzMAogICAgICAgICAgICB9OwogICAgICAgICAgICBDdXJyZW50U2NyZWVuID09PSAiQ2hhdFJvb20iID8KICAgICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogICAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICAgIH0sIDMwMDApOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCAiWW9rZWQiKTsKICAgICAgICAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsICJMZWdzQ2xvc2VkIik7CiAgICAgICAgICAgIEludmVudG9yeUdldChQbGF5ZXIsICJFbW90aWNvbiIpLlByb3BlcnR5Lk92ZXJyaWRlSGVpZ2h0ID0gewogICAgICAgICAgICAgICAgSGVpZ2h0OiAyNTAKICAgICAgICAgICAgfTsKICAgICAgICAgICAgQ3VycmVudFNjcmVlbiA9PT0gJ0NoYXRSb29tJyA/CiAgICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpIDoKICAgICAgICAgICAgICAgIENoYXJhY3RlclJlZnJlc2goUGxheWVyKTsKICAgICAgICB9LCA0MDAwKTsgICAgCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsICJMZWdzT3BlbiIpOwogICAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgIk92ZXJUaGVIZWFkIikKICAgICAgICAgICAgSW52ZW50b3J5R2V0KFBsYXllciwgIkVtb3RpY29uIikuUHJvcGVydHkuT3ZlcnJpZGVIZWlnaHQgPSB7CiAgICAgICAgICAgICAgICBIZWlnaHQ6IDEzMAogICAgICAgICAgICB9OwogICAgICAgICAgICBDdXJyZW50U2NyZWVuID09PSAiQ2hhdFJvb20iID8KICAgICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogICAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICAgIH0sIDUwMDApOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCBudWxsKTsKICAgICAgICAgICAgZGVsZXRlIEludmVudG9yeUdldChQbGF5ZXIsICdFbW90aWNvbicpLlByb3BlcnR5Lk92ZXJyaWRlSGVpZ2h0OwogICAgICAgICAgICBDdXJyZW50U2NyZWVuID09PSAnQ2hhdFJvb20nID8KICAgICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogICAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICAgIH0sIDYwMDApOyAgICAKfSB9LAogIHsgbmFtZTogIkNoZWVyIiwgYWN0aW9uOiAoKSA9PiB7CiAgICBzaG93VG9hc3RzY3BnKCk7CiAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsIG51bGwpOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsICJZb2tlZCIpOwogICAgICAgICAgQ3VycmVudFNjcmVlbiA9PT0gIkNoYXRSb29tIiA/CiAgICAgICAgICAgICAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoUGxheWVyKSA6CiAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICB9LCAxMDAwKTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCAiT3ZlclRoZUhlYWQiKTsKICAgICAgICAgIEN1cnJlbnRTY3JlZW4gPT09ICJDaGF0Um9vbSIgPwogICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogICAgICAgICAgICAgIENoYXJhY3RlclJlZnJlc2goUGxheWVyKTsKICAgICAgfSwgMjAwMCk7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgIllva2VkIik7CiAgICAgICAgICBDdXJyZW50U2NyZWVuID09PSAiQ2hhdFJvb20iID8KICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpIDoKICAgICAgICAgICAgICBDaGFyYWN0ZXJSZWZyZXNoKFBsYXllcik7CiAgICAgIH0sIDMwMDApOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsICJPdmVyVGhlSGVhZCIpOwogICAgICAgICAgQ3VycmVudFNjcmVlbiA9PT0gIkNoYXRSb29tIiA/CiAgICAgICAgICAgICAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoUGxheWVyKSA6CiAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICB9LCA0MDAwKTsgICAgCiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgIllva2VkIik7CiAgICAgICAgICBDdXJyZW50U2NyZWVuID09PSAiQ2hhdFJvb20iID8KICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpIDoKICAgICAgICAgICAgICBDaGFyYWN0ZXJSZWZyZXNoKFBsYXllcik7CiAgICAgIH0sIDUwMDApOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsICJPdmVyVGhlSGVhZCIpOwogICAgICAgICAgQ3VycmVudFNjcmVlbiA9PT0gIkNoYXRSb29tIiA/CiAgICAgICAgICAgICAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoUGxheWVyKSA6CiAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICB9LCA2MDAwKTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCBudWxsKTsKICAgICAgICAgIEN1cnJlbnRTY3JlZW4gPT09ICdDaGF0Um9vbScgPwogICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogICAgICAgICAgICAgIENoYXJhY3RlclJlZnJlc2goUGxheWVyKTsKICAgICAgfSwgNzAwMCk7IH0gfSwKICB7IG5hbWU6ICJKdW1waW5nIEphY2tzIiwgYWN0aW9uOiAoKSA9PiB7CiAgICBzaG93VG9hc3RzY3BnKCk7CiAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsIG51bGwpOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgSW52ZW50b3J5R2V0KFBsYXllciwgIkVtb3RpY29uIikuUHJvcGVydHkuT3ZlcnJpZGVIZWlnaHQgPSB7CiAgICAgICAgICAgICAgSGVpZ2h0OiAxNTAKICAgICAgICAgIH07CiAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgIkxlZ3NPcGVuIik7CiAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgIk92ZXJUaGVIZWFkIik7CiAgICAgICAgICBDdXJyZW50U2NyZWVuID09PSAiQ2hhdFJvb20iID8KICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpIDoKICAgICAgICAgICAgICBDaGFyYWN0ZXJSZWZyZXNoKFBsYXllcik7CiAgICAgIH0sIDEwMDApOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgSW52ZW50b3J5R2V0KFBsYXllciwgIkVtb3RpY29uIikuUHJvcGVydHkuT3ZlcnJpZGVIZWlnaHQgPSB1bmRlZmluZWQ7CiAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgbnVsbCk7CiAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgIkxlZ3NDbG9zZWQiKTsKICAgICAgICAgIEN1cnJlbnRTY3JlZW4gPT09ICJDaGF0Um9vbSIgPwogICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogICAgICAgICAgICAgIENoYXJhY3RlclJlZnJlc2goUGxheWVyKTsKICAgICAgfSwgMjAwMCk7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICBJbnZlbnRvcnlHZXQoUGxheWVyLCAiRW1vdGljb24iKS5Qcm9wZXJ0eS5PdmVycmlkZUhlaWdodCA9IHsKICAgICAgICAgICAgICBIZWlnaHQ6IDE1MAogICAgICAgICAgfTsKICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCAiTGVnc09wZW4iKTsKICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCAiT3ZlclRoZUhlYWQiKQogICAgICAgICAgQ3VycmVudFNjcmVlbiA9PT0gIkNoYXRSb29tIiA/CiAgICAgICAgICAgICAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoUGxheWVyKSA6CiAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICB9LCAzMDAwKTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCBudWxsKTsKICAgICAgICAgIGRlbGV0ZSBJbnZlbnRvcnlHZXQoUGxheWVyLCAnRW1vdGljb24nKS5Qcm9wZXJ0eS5PdmVycmlkZUhlaWdodDsKICAgICAgICAgIEN1cnJlbnRTY3JlZW4gPT09ICdDaGF0Um9vbScgPwogICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogICAgICAgICAgICAgIENoYXJhY3RlclJlZnJlc2goUGxheWVyKTsKICAgICAgfSwgNDAwMCk7ICAgICB9IH0sCiAgeyBuYW1lOiAiQnVycGVlcyIsIGFjdGlvbjogKCkgPT4gewogICAgc2hvd1RvYXN0c2NwZygpOwogICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsIG51bGwpOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsICJIb2d0aWVkIik7CiAgICAgICAgICBDdXJyZW50U2NyZWVuID09PSAiQ2hhdFJvb20iID8KICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpIDoKICAgICAgICAgICAgICBDaGFyYWN0ZXJSZWZyZXNoKFBsYXllcik7CiAgICAgIH0sIDEwMDApOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsIG51bGwpOwogICAgICAgICAgQ3VycmVudFNjcmVlbiA9PT0gIkNoYXRSb29tIiA/CiAgICAgICAgICAgICAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoUGxheWVyKSA6CiAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICB9LCAyMDAwKTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCAiWW9rZWQiKTsKICAgICAgICAgIEN1cnJlbnRTY3JlZW4gPT09ICJDaGF0Um9vbSIgPwogICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogICAgICAgICAgICAgIENoYXJhY3RlclJlZnJlc2goUGxheWVyKTsKICAgICAgfSwgMzAwMCk7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgbnVsbCk7CiAgICAgICAgICBDdXJyZW50U2NyZWVuID09PSAiQ2hhdFJvb20iID8KICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpIDoKICAgICAgICAgICAgICBDaGFyYWN0ZXJSZWZyZXNoKFBsYXllcik7CiAgICAgIH0sIDQwMDApOyAgICAKICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCAiSG9ndGllZCIpOwogICAgICAgICAgQ3VycmVudFNjcmVlbiA9PT0gIkNoYXRSb29tIiA/CiAgICAgICAgICAgICAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoUGxheWVyKSA6CiAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICB9LCA1MDAwKTsKICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgIENoYXJhY3RlclNldEFjdGl2ZVBvc2UoUGxheWVyLCBudWxsKTsKICAgICAgICAgIEN1cnJlbnRTY3JlZW4gPT09ICJDaGF0Um9vbSIgPwogICAgICAgICAgICAgIENoYXRSb29tQ2hhcmFjdGVyVXBkYXRlKFBsYXllcikgOgogICAgICAgICAgICAgIENoYXJhY3RlclJlZnJlc2goUGxheWVyKTsKICAgICAgfSwgNjAwMCk7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgIllva2VkIik7CiAgICAgICAgICBDdXJyZW50U2NyZWVuID09PSAnQ2hhdFJvb20nID8KICAgICAgICAgICAgICBDaGF0Um9vbUNoYXJhY3RlclVwZGF0ZShQbGF5ZXIpIDoKICAgICAgICAgICAgICBDaGFyYWN0ZXJSZWZyZXNoKFBsYXllcik7CiAgICAgIH0sIDcwMDApOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgQ2hhcmFjdGVyU2V0QWN0aXZlUG9zZShQbGF5ZXIsIG51bGwpOwogICAgICAgICAgQ3VycmVudFNjcmVlbiA9PT0gJ0NoYXRSb29tJyA/CiAgICAgICAgICAgICAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoUGxheWVyKSA6CiAgICAgICAgICAgICAgQ2hhcmFjdGVyUmVmcmVzaChQbGF5ZXIpOwogICAgICB9LCA4MDAwKTsgfSB9LAogIHsgbmFtZTogIlNsZWVwIiwgYWN0aW9uOiAoKSA9PiB7CiAgICBzaG93VG9hc3RzY3BnKCk7CiAgICBDaGFyYWN0ZXJTZXRBY3RpdmVQb3NlKFBsYXllciwgIkhvZ3RpZWQiKTsKICBDaGFyYWN0ZXJTZXRGYWNpYWxFeHByZXNzaW9uKFBsYXllciwgIkV5ZXMiLCAiQ2xvc2VkIik7CiAgQ2hhcmFjdGVyU2V0RmFjaWFsRXhwcmVzc2lvbihQbGF5ZXIsICJFeWVzMiIsICJDbG9zZWQiKTsKICBDaGFyYWN0ZXJTZXRGYWNpYWxFeHByZXNzaW9uKFBsYXllciwgIkVtb3RpY29uIiwgIlNsZWVwIik7CiAgQ2hhdFJvb21DaGFyYWN0ZXJVcGRhdGUoUGxheWVyKTsgIH0gfQpdOwoKY29uc3QgYnV0dG9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CmJ1dHRvbkNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7CmJ1dHRvbkNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICIzMDBweCI7CmJ1dHRvbkNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAiMzAwcHgiOwpidXR0b25Db250YWluZXIuc3R5bGUubGVmdCA9ICI1MCUiOwpidXR0b25Db250YWluZXIuc3R5bGUudG9wID0gIjUwJSI7CmJ1dHRvbkNvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSAidHJhbnNsYXRlKC01MCUsIC01MCUpIjsKYnV0dG9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CmNvbnN0IGJ1dHRvbkNpcmNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwpidXR0b25DaXJjbGUuc3R5bGUucG9zaXRpb24gPSAiYWJzb2x1dGUiOwpidXR0b25DaXJjbGUuc3R5bGUud2lkdGggPSAiMjAwcHgiOwpidXR0b25DaXJjbGUuc3R5bGUuaGVpZ2h0ID0gIjIwMHB4IjsKYnV0dG9uQ2lyY2xlLnN0eWxlLmJvcmRlclJhZGl1cyA9ICI1MCUiOwpidXR0b25DaXJjbGUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gIndoaXRlIjsKYnV0dG9uQ2lyY2xlLnN0eWxlLm9wYWNpdHkgPSAiMSI7CmJ1dHRvbkNpcmNsZS5zdHlsZS5sZWZ0ID0gIjUwJSI7CmJ1dHRvbkNpcmNsZS5zdHlsZS50b3AgPSAiNTAlIjsKYnV0dG9uQ2lyY2xlLnN0eWxlLnRyYW5zZm9ybSA9ICJ0cmFuc2xhdGUoLTUwJSwgLTUwJSkiOwpidXR0b25DaXJjbGUuc3R5bGUudHJhbnNpdGlvbiA9ICJvcGFjaXR5IDAuMnMgZWFzZS1pbi1vdXQiOwpidXR0b25DaXJjbGUuc3R5bGUuYm9yZGVyID0gIjJweCBzb2xpZCBibGFjayI7CgpidXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uQ2lyY2xlKTsKY29uc3QgbG9nbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImltZyIpOwpsb2dvLnNyYyA9ICJodHRwczovL21lZGlhLmRpc2NvcmRhcHAubmV0L2F0dGFjaG1lbnRzLzc4MTc0OTIyOTMzMTkzOTMyOC8xMDc5NjU5MDE2OTE5MTk1NzQ4L2I2NjQxOTExNzg5N2E5ODgucG5nP3dpZHRoPTExOTAmaGVpZ2h0PTExODkiOwpsb2dvLnN0eWxlLnBvc2l0aW9uID0gImFic29sdXRlIjsKbG9nby5zdHlsZS53aWR0aCA9ICI4MHB4IjsKbG9nby5zdHlsZS5oZWlnaHQgPSAiODBweCI7CmxvZ28uc3R5bGUuYm9yZGVyUmFkaXVzID0gIjUwJSI7CmxvZ28uc3R5bGUubGVmdCA9ICI1MCUiOwpsb2dvLnN0eWxlLnRvcCA9ICI1MCUiOwpsb2dvLnN0eWxlLnRyYW5zZm9ybSA9ICJ0cmFuc2xhdGUoLTUwJSwgLTUwJSkiOwpidXR0b25DaXJjbGUuYXBwZW5kQ2hpbGQobG9nbyk7CmNvbnN0IGJ1dHRvbnMgPSBbXTsKZm9yIChsZXQgaSA9IDA7IGkgPCBidXR0b25EYXRhLmxlbmd0aDsgaSsrKSB7CiAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYnV0dG9uIik7CiAgYnV0dG9uLmlubmVyVGV4dCA9IGJ1dHRvbkRhdGFbaV0ubmFtZTsKICBidXR0b24uc3R5bGUucG9zaXRpb24gPSAiYWJzb2x1dGUiOwogIGJ1dHRvbi5zdHlsZS53aWR0aCA9ICI4MHB4IjsKICBidXR0b24uc3R5bGUuaGVpZ2h0ID0gIjgwcHgiOwogIGJ1dHRvbi5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiNTAlIjsKICBidXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gImJsYWNrIjsKICBidXR0b24uc3R5bGUuY29sb3IgPSAid2hpdGUiOwogIGJ1dHRvbi5zdHlsZS5ib3hTaGFkb3cgPSAiMCAycHggNXB4IHJnYmEoMCwgMCwgMCwgMC4zKSI7CiAgYnV0dG9uLnN0eWxlLmxlZnQgPSAiNTAlIjsKICBidXR0b24uc3R5bGUudG9wID0gIjUwJSI7CiAgYnV0dG9uLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgcm90YXRlKCR7aSAqICgzNjAgLyBidXR0b25EYXRhLmxlbmd0aCl9ZGVnKSB0cmFuc2xhdGUoMCwgLTEwMHB4KSByb3RhdGUoJHstaSAqICgzNjAgLyBidXR0b25EYXRhLmxlbmd0aCl9ZGVnKWA7CiAgYnV0dG9uLnN0eWxlLnRyYW5zaXRpb24gPSAib3BhY2l0eSAwLjJzIGVhc2UtaW4tb3V0LCB0cmFuc2Zvcm0gMC4ycyBlYXNlLWluLW91dCI7CiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgYnV0dG9uRGF0YVtpXS5hY3Rpb24pOwogIGJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pOwogIGJ1dHRvbnMucHVzaChidXR0b24pOwoKICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigibW91c2VlbnRlciIsICgpID0+IHsKICAgIGJ1dHRvbi5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKC01MCUsIC01MCUpIHJvdGF0ZSgke2kgKiAoMzYwIC8gYnV0dG9uRGF0YS5sZW5ndGgpfWRlZykgdHJhbnNsYXRlKDAsIC05OXB4KSByb3RhdGUoJHstaSAqICgzNjAgLyBidXR0b25EYXRhLmxlbmd0aCl9ZGVnKSBzY2FsZSgxLjA1KWA7CiAgfSk7CgogIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWxlYXZlIiwgKCkgPT4gewogICAgYnV0dG9uLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgcm90YXRlKCR7aSAqICgzNjAgLyBidXR0b25EYXRhLmxlbmd0aCl9ZGVnKSB0cmFuc2xhdGUoMCwgLTEwMHB4KSByb3RhdGUoJHstaSAqICgzNjAgLyBidXR0b25EYXRhLmxlbmd0aCl9ZGVnKSBzY2FsZSgxKWA7CiAgfSk7Cn0KCgoKbGV0IGlzR3JhdmVLZXlEb3duID0gZmFsc2U7CmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCAoZXZlbnQpID0+IHsKaWYgKGV2ZW50LmtleSA9PT0gImAiKSB7CiAgaXNHcmF2ZUtleURvd24gPSB0cnVlOwp9IGVsc2UgaWYgKGlzR3JhdmVLZXlEb3duICYmIGV2ZW50LmtleSA9PT0gImUiKSB7CiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChidXR0b25Db250YWluZXIpOwogIGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICBpc0dyYXZlS2V5RG93biA9IGZhbHNlOwp9Cn0pOwpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJrZXl1cCIsIChldmVudCkgPT4gewppZiAoZXZlbnQua2V5ID09PSAiYCIpIHsKICBpc0dyYXZlS2V5RG93biA9IGZhbHNlOwp9Cn0pOwoKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoZXZlbnQpID0+IHsKICBpZiAoIWJ1dHRvbkNvbnRhaW5lci5jb250YWlucyhldmVudC50YXJnZXQpKSB7CiAgICBpZiAoYnV0dG9uQ29udGFpbmVyLnBhcmVudE5vZGUgPT09IGRvY3VtZW50LmJvZHkpIHsKICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChidXR0b25Db250YWluZXIpOwogICAgfQogICAgYnV0dG9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgfQp9KTsKCi8vRW5kIE9mIEVtb3RlIE1lbnUgX19fX19fX19fX19fX19fX19fCgovL0VORCBPRiBDT05URVhUIE1FTlUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCi8vQkNNRSBMT0dPIE9uIENoYXJhY3RlcgpmZXRjaChhdG9iKCdhSFIwY0hNNkx5OXlZWGN1WjJsMGFIVmlkWE5sY21OdmJuUmxiblF1WTI5dEwwSkRUVk0zTDBKRFRTOXRZV2x1TDBKRFRDNXFjdz09JykpCi50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSkKLnRoZW4odGV4dCA9PiB7CmNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwpzY3JpcHQuaW5uZXJIVE1MID0gdGV4dDsKZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOwp9KQoKCmZ1bmN0aW9uIHNob3dUb2FzdHNjcGcoKSB7CiAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJvcHRpb24zIikgIT09IG51bGwpIHsKICAgIGNoZWNrYm94My5jaGVja2VkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oIm9wdGlvbjMiKSA9PT0gInRydWUiOwogICAgaWYgKGNoZWNrYm94My5jaGVja2VkKSB7CiAgICAgIEF1ZGlvUGxheUluc3RhbnRTb3VuZCgiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvNzgxNzQ5MjI5MzMxOTM5MzI4LzEwOTA1MzA0NzkwODM2MzA2NzIvaDQydndjZC1ub3RpZmljYXRpb24tMV92TXFoVmx0Uy5tcDMiLCAxKTsKICAgIH0KICB9CiAgICB2YXIgdG9hc3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gImZpeGVkIjsKICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmJvdHRvbSA9ICI1cHgiOwogICAgdG9hc3RDb250YWluZXIuc3R5bGUucmlnaHQgPSAiNXB4IjsKICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICJ3aGl0ZSI7CiAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5jb2xvciA9ICIjMTQxNDE0IjsKICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLnBhZGRpbmcgPSAiNXB4IjsKICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmJvcmRlciA9ICIycHggc29saWQgIzRDQUY1MCI7CiAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiNXB4IjsKICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmJveFNoYWRvdyA9ICIycHggMnB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjUpIjsKICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICB0b2FzdENvbnRhaW5lci5zdHlsZS56SW5kZXggPSAiOTk5IjsKICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLnRyYW5zaXRpb24gPSAib3BhY2l0eSAwLjVzIGVhc2UtaW4tb3V0IjsKICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAiMCI7CiAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gImZsZXgiOwogICAgdG9hc3RDb250YWluZXIuc3R5bGUuYWxpZ25JdGVtcyA9ICJjZW50ZXIiOwogICAgdmFyIHN0YXR1c0JhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwpzdGF0dXNCYXIuc3R5bGUud2lkdGggPSAiMTAwJSI7CnN0YXR1c0Jhci5zdHlsZS5oZWlnaHQgPSAiM3B4IjsKc3RhdHVzQmFyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICJibGFjayI7CnN0YXR1c0Jhci5zdHlsZS5wb3NpdGlvbiA9ICJhYnNvbHV0ZSI7CnN0YXR1c0Jhci5zdHlsZS5ib3R0b20gPSAiMCI7CnN0YXR1c0Jhci5zdHlsZS5sZWZ0ID0gIjAiOwpzdGF0dXNCYXIuc3R5bGUudHJhbnNpdGlvbiA9ICJ3aWR0aCA1cyBlYXNlLWluLW91dCI7CnN0YXR1c0Jhci5zdHlsZS53aWR0aCA9ICIwJSI7CnRvYXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHN0YXR1c0Jhcik7CnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgc3RhdHVzQmFyLnN0eWxlLndpZHRoID0gIjEwMCUiOwp9LCAwKTsKICAgIAp2YXIgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImltZyIpOwppY29uLnNyYyA9ICJodHRwczovL21lZGlhLmRpc2NvcmRhcHAubmV0L2F0dGFjaG1lbnRzLzc4MTc0OTIyOTMzMTkzOTMyOC8xMDc5NjU5MDE2OTE5MTk1NzQ4L2I2NjQxOTExNzg5N2E5ODgucG5nP3dpZHRoPTExOTAmaGVpZ2h0PTExODkiOwppY29uLnN0eWxlLndpZHRoID0gIjIzcHgiOwppY29uLnN0eWxlLmhlaWdodCA9ICIyM3B4IjsKaWNvbi5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiNTAlIjsKaWNvbi5zdHlsZS5tYXJnaW5SaWdodCA9ICItMzBweCI7Cmljb24uc3R5bGUubWFyZ2luQm90dG9tID0gIi01cHgiOwp0b2FzdENvbnRhaW5lci5hcHBlbmRDaGlsZChpY29uKTsKCnZhciB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpOwp0ZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAiYm9sZCI7CnRleHQuc3R5bGUubWFyZ2luTGVmdCA9ICIzNXB4IjsKdGV4dC5pbm5lckhUTUwgPSAiQWN0aW9uIFN1Y2Nlc3NmdWxseSBFeGVjdXRlZCI7CnRvYXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHRleHQpOwoKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRvYXN0Q29udGFpbmVyKTsKICAKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwogICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gIjEiOwogICAgfSwgMCk7CiAgCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gIjAiOwogICAgfSwgNTAwMCk7CiAgCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICB0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgfSwgNTUwMCk7CiAgICBzZW5kRmRlYnVnKCk7CgogIH0KICAKCi8vVGhlIFVwZGF0ZSB0b2FzdApmdW5jdGlvbiBzaG93VG9hc3RVcGRhdGUoKSB7CnZhciB0b2FzdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwp0b2FzdENvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICJmaXhlZCI7CnRvYXN0Q29udGFpbmVyLnN0eWxlLmJvdHRvbSA9ICI1cHgiOwp0b2FzdENvbnRhaW5lci5zdHlsZS5yaWdodCA9ICI1cHgiOwp0b2FzdENvbnRhaW5lci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAid2hpdGUiOwp0b2FzdENvbnRhaW5lci5zdHlsZS5jb2xvciA9ICIjMTQxNDE0IjsKdG9hc3RDb250YWluZXIuc3R5bGUucGFkZGluZyA9ICI1cHgiOwp0b2FzdENvbnRhaW5lci5zdHlsZS5ib3JkZXIgPSAiMnB4IHNvbGlkICNmMjJjMmMiOwp0b2FzdENvbnRhaW5lci5zdHlsZS5ib3JkZXJSYWRpdXMgPSAiNXB4IjsKdG9hc3RDb250YWluZXIuc3R5bGUuYm94U2hhZG93ID0gIjJweCAycHggMTBweCByZ2JhKDAsIDAsIDAsIDAuNSkiOwp0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwp0b2FzdENvbnRhaW5lci5zdHlsZS56SW5kZXggPSAiOTk5IjsKdG9hc3RDb250YWluZXIuc3R5bGUudHJhbnNpdGlvbiA9ICJvcGFjaXR5IDAuNXMgZWFzZS1pbi1vdXQiOwp0b2FzdENvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gIjAiOwp0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gImZsZXgiOwp0b2FzdENvbnRhaW5lci5zdHlsZS5hbGlnbkl0ZW1zID0gImNlbnRlciI7CnZhciBzdGF0dXNCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKc3RhdHVzQmFyLnN0eWxlLndpZHRoID0gIjEwMCUiOwpzdGF0dXNCYXIuc3R5bGUuaGVpZ2h0ID0gIjNweCI7CnN0YXR1c0Jhci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAiYmxhY2siOwpzdGF0dXNCYXIuc3R5bGUucG9zaXRpb24gPSAiYWJzb2x1dGUiOwpzdGF0dXNCYXIuc3R5bGUuYm90dG9tID0gIjAiOwpzdGF0dXNCYXIuc3R5bGUubGVmdCA9ICIwIjsKc3RhdHVzQmFyLnN0eWxlLnRyYW5zaXRpb24gPSAid2lkdGggNXMgZWFzZS1pbi1vdXQiOwpzdGF0dXNCYXIuc3R5bGUud2lkdGggPSAiMCUiOwp0b2FzdENvbnRhaW5lci5hcHBlbmRDaGlsZChzdGF0dXNCYXIpOwpzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogIHN0YXR1c0Jhci5zdHlsZS53aWR0aCA9ICIxMDAlIjsKfSwgMCk7Cgp2YXIgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsKY2xvc2VCdXR0b24uc3R5bGUuYm9yZGVyID0gIm5vbmUiOwpjbG9zZUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kID0gIm5vbmUiOwpjbG9zZUJ1dHRvbi5zdHlsZS50b3AgPSAiNXB4IjsKY2xvc2VCdXR0b24uc3R5bGUucmlnaHQgPSAiNXB4IjsKY2xvc2VCdXR0b24uc3R5bGUuZm9udFdlaWdodCA9ICJib2xkIjsKY2xvc2VCdXR0b24uc3R5bGUuZm9udFNpemUgPSAiMTZweCI7CmNsb3NlQnV0dG9uLnN0eWxlLm1hcmdpbkxlZnQgPSAiLTJweCI7CmNsb3NlQnV0dG9uLnN0eWxlLm1hcmdpblJpZ2h0ID0gIjBweCI7CmNsb3NlQnV0dG9uLmlubmVySFRNTCA9ICJYIjsKdG9hc3RDb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b24pOwpjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uKCkgewogIHRvYXN0Q29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAiMCI7CiAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgIHRvYXN0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgfSwgNTAwKTsKfSk7CnZhciBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIik7Cmljb24uc3JjID0gImh0dHBzOi8vbWVkaWEuZGlzY29yZGFwcC5uZXQvYXR0YWNobWVudHMvNzgxNzQ5MjI5MzMxOTM5MzI4LzEwNzk2NTkwMTY5MTkxOTU3NDgvYjY2NDE5MTE3ODk3YTk4OC5wbmc/d2lkdGg9MTE5MCZoZWlnaHQ9MTE4OSI7Cmljb24uc3R5bGUud2lkdGggPSAiMjNweCI7Cmljb24uc3R5bGUuaGVpZ2h0ID0gIjIzcHgiOwppY29uLnN0eWxlLmJvcmRlclJhZGl1cyA9ICI1MCUiOwppY29uLnN0eWxlLm1hcmdpblJpZ2h0ID0gIi0zMHB4IjsKaWNvbi5zdHlsZS5tYXJnaW5Cb3R0b20gPSAiLTVweCI7CnRvYXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKGljb24pOwoKLy8gVXBkYXRlIGNsaWVudCBtZXNzYWdlCnZhciB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpOwp0ZXh0LnN0eWxlLmZvbnRXZWlnaHQgPSAiYm9sZCI7CnRleHQuc3R5bGUubWFyZ2luTGVmdCA9ICIzNXB4IjsKdGV4dC5pbm5lckhUTUwgPSAiTmV3IHVwZGF0ZSBkZXRlY3RlZCwgcmVmcmVzaCBCQyB0byB1cGRhdGUgdG8gVjIuMC43IjsKdG9hc3RDb250YWluZXIuYXBwZW5kQ2hpbGQodGV4dCk7Cgpkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRvYXN0Q29udGFpbmVyKTsKCnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgdG9hc3RDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICJibG9jayI7CiAgdG9hc3RDb250YWluZXIuc3R5bGUub3BhY2l0eSA9ICIxIjsKfSwgMCk7CgpzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogIHRvYXN0Q29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAiMCI7Cn0sIDUwMDAwMDApOwoKc2V0VGltZW91dChmdW5jdGlvbigpIHsKICB0b2FzdENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwp9LCA1NTAwMDAwKTsKCn0KCiAgLy8gRW5kIG9mIFVwZGF0ZSBUb2FzdF9fX19fX19fX19fX19fX18KCiAgY29uc3QgZWxlbWVudFRvUmVtb3ZlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2W3N0eWxlPSJwb3NpdGlvbjogYWJzb2x1dGU7IGluc2V0OiA1JTsgYmFja2dyb3VuZDogd2hpdGU7IGRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IHBhZGRpbmc6IDFlbTsiXScpOwoKICBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHsKICAgIGNvbnN0IGVsZW1lbnRUb1JlbW92ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2RpdltzdHlsZT0icG9zaXRpb246IGFic29sdXRlOyBpbnNldDogNSU7IGJhY2tncm91bmQ6IHdoaXRlOyBkaXNwbGF5OiBmbGV4OyBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyBwYWRkaW5nOiAxZW07Il0nKTsKICAgIGlmIChlbGVtZW50VG9SZW1vdmUpIHsKICAgICAgY29uc3QgYnV0dG9ucyA9IGVsZW1lbnRUb1JlbW92ZS5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b25bc3R5bGU9ImN1cnNvcjogcG9pbnRlcjsiXScpOwogICAgICBpZiAoYnV0dG9ucykgewogICAgICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4gYnV0dG9uLmNsaWNrKCkpOwogICAgICB9CiAgICB9CiAgfSwgMSk7CiAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7CiAgICBjb25zdCBlbGVtZW50VG9SZW1vdmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXZbc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgaW5zZXQ6IDUlOyBiYWNrZ3JvdW5kOiB3aGl0ZTsgZGlzcGxheTogZmxleDsgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgcGFkZGluZzogMWVtOyJdJyk7CiAgICBpZiAoZWxlbWVudFRvUmVtb3ZlKSB7CiAgICAgIGNvbnN0IGJ1dHRvbnMgPSBlbGVtZW50VG9SZW1vdmUucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uW3N0eWxlPSJjdXJzb3I6IHBvaW50ZXI7Il0nKTsKICAgICAgaWYgKGJ1dHRvbnMpIHsKICAgICAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHsKICAgICAgICAgIGlmIChidXR0b24udGV4dENvbnRlbnQgPT09ICJEbyBub3Qgc2hvdyB0aGlzIHJlcG9ydCBhZ2FpbiB1bmxlc3Mgc29tZXRoaW5nIGNoYW5nZXMiIHx8IGJ1dHRvbi50ZXh0Q29udGVudCA9PT0gIkNsb3NlIikgewogICAgICAgICAgICBidXR0b24uY2xpY2soKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH0sIDUwMCk7CgogIC8vICBVUkwgb2YgdGhlIHVwZGF0ZSBwYWdlCmNvbnN0IHVybCA9ICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQkNNUzcvQkNNL21haW4vdXBkYXRlbWFuYWdlci5qcyc7CmNvbnN0IG1heFZlcnNpb24gPSAxNTsKbGV0IGFsZXJ0VHJpZ2dlcmVkID0gZmFsc2U7CmZ1bmN0aW9uIGNoZWNrVmVyc2lvbigpIHsKICBmZXRjaCh1cmwpCiAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpCiAgICAudGhlbih2ZXJzaW9uID0+IHsKICAgICAgaWYgKHBhcnNlSW50KHZlcnNpb24pID4gbWF4VmVyc2lvbiAmJiAhYWxlcnRUcmlnZ2VyZWQpIHsKICAgICAgICBzaG93VG9hc3RVcGRhdGUoKTsKICAgICAgICBhbGVydFRyaWdnZXJlZCA9IHRydWU7CiAgICAgIH0KICAgIH0pCiAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpOwp9Ci8vIENoZWNrIGZvciB1cGRhdGVzIGV2ZXJ5IDUgc2Vjb25kcwpzZXRJbnRlcnZhbChjaGVja1ZlcnNpb24sIDUwMDApOwp9Cn0pCgoK')
if (sprc) {
eval(sprc);
}
/*
40
*/
